{"ast":null,"code":"var _jsxFileName = \"/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/components/LoadingSpinner.tsx\";\nimport React from 'react';\nimport { CircularProgress, Box, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LoadingSpinner = ({\n  message = 'Loading...',\n  fullScreen = false\n}) => {\n  const content = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n      size: 40\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      sx: {\n        mt: 2,\n        textAlign: 'center'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n  if (fullScreen) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        bgcolor: theme => theme.palette.mode === 'light' ? 'rgba(255, 255, 255, 0.8)' : 'rgba(0, 0, 0, 0.8)',\n        zIndex: theme => theme.zIndex.modal + 1\n      },\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      p: 3\n    },\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_c = LoadingSpinner;\nexport default LoadingSpinner;\nvar _c;\n$RefreshReg$(_c, \"LoadingSpinner\");","map":{"version":3,"names":["React","CircularProgress","Box","Typography","jsxDEV","_jsxDEV","Fragment","_Fragment","LoadingSpinner","message","fullScreen","content","children","size","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","sx","mt","textAlign","position","top","left","right","bottom","display","flexDirection","alignItems","justifyContent","bgcolor","theme","palette","mode","zIndex","modal","p","_c","$RefreshReg$"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/components/LoadingSpinner.tsx"],"sourcesContent":["import React from 'react';\nimport { CircularProgress, Box, Typography } from '@mui/material';\n\ninterface LoadingSpinnerProps {\n  message?: string;\n  fullScreen?: boolean;\n}\n\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({\n  message = 'Loading...',\n  fullScreen = false,\n}) => {\n  const content = (\n    <>\n      <CircularProgress size={40} />\n      {message && (\n        <Typography\n          variant=\"body2\"\n          color=\"textSecondary\"\n          sx={{ mt: 2, textAlign: 'center' }}\n        >\n          {message}\n        </Typography>\n      )}\n    </>\n  );\n\n  if (fullScreen) {\n    return (\n      <Box\n        sx={{\n          position: 'fixed',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          bgcolor: (theme) =>\n            theme.palette.mode === 'light'\n              ? 'rgba(255, 255, 255, 0.8)'\n              : 'rgba(0, 0, 0, 0.8)',\n          zIndex: (theme) => theme.zIndex.modal + 1,\n        }}\n      >\n        {content}\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        p: 3,\n      }}\n    >\n      {content}\n    </Box>\n  );\n};\n\nexport default LoadingSpinner;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,EAAEC,GAAG,EAAEC,UAAU,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAOlE,MAAMC,cAA6C,GAAGA,CAAC;EACrDC,OAAO,GAAG,YAAY;EACtBC,UAAU,GAAG;AACf,CAAC,KAAK;EACJ,MAAMC,OAAO,gBACXN,OAAA,CAAAE,SAAA;IAAAK,QAAA,gBACEP,OAAA,CAACJ,gBAAgB;MAACY,IAAI,EAAE;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC7BR,OAAO,iBACNJ,OAAA,CAACF,UAAU;MACTe,OAAO,EAAC,OAAO;MACfC,KAAK,EAAC,eAAe;MACrBC,EAAE,EAAE;QAAEC,EAAE,EAAE,CAAC;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAV,QAAA,EAElCH;IAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACb;EAAA,eACD,CACH;EAED,IAAIP,UAAU,EAAE;IACd,oBACEL,OAAA,CAACH,GAAG;MACFkB,EAAE,EAAE;QACFG,QAAQ,EAAE,OAAO;QACjBC,GAAG,EAAE,CAAC;QACNC,IAAI,EAAE,CAAC;QACPC,KAAK,EAAE,CAAC;QACRC,MAAM,EAAE,CAAC;QACTC,OAAO,EAAE,MAAM;QACfC,aAAa,EAAE,QAAQ;QACvBC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBC,OAAO,EAAGC,KAAK,IACbA,KAAK,CAACC,OAAO,CAACC,IAAI,KAAK,OAAO,GAC1B,0BAA0B,GAC1B,oBAAoB;QAC1BC,MAAM,EAAGH,KAAK,IAAKA,KAAK,CAACG,MAAM,CAACC,KAAK,GAAG;MAC1C,CAAE;MAAAzB,QAAA,EAEDD;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAEV;EAEA,oBACEZ,OAAA,CAACH,GAAG;IACFkB,EAAE,EAAE;MACFQ,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBC,UAAU,EAAE,QAAQ;MACpBC,cAAc,EAAE,QAAQ;MACxBO,CAAC,EAAE;IACL,CAAE;IAAA1B,QAAA,EAEDD;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACsB,EAAA,GAzDI/B,cAA6C;AA2DnD,eAAeA,cAAc;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}