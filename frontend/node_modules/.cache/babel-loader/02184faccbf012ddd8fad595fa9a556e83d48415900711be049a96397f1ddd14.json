{"ast":null,"code":"import{audioManager}from'./audioUtils';class NotificationQueue{constructor(){let maxSize=arguments.length>0&&arguments[0]!==undefined?arguments[0]:100;this.queue=void 0;this.maxSize=void 0;this.callbacks=void 0;this.queue=[];this.maxSize=maxSize;this.callbacks=new Set();}subscribe(callback){this.callbacks.add(callback);return()=>{this.callbacks.delete(callback);};}notify(notification){this.callbacks.forEach(callback=>callback(notification));}addPioneerNotification(title,message,category,confidence){// Calculate priority based on category and confidence\nlet priority=1;// Higher priority for high confidence signals\nif(confidence>=0.9)priority+=2;else if(confidence>=0.7)priority+=1;// Additional priority for certain categories\nif(category==='Protocol_Scout'||category==='RWA_Innovation'){priority+=1;}const notification={id:Date.now().toString(),title,message,type:'pioneer',category,confidence,timestamp:Date.now(),priority,read:false};this.add(notification);// Play appropriate sound based on category and confidence\naudioManager.playPioneerNotification(category,confidence);}add(notification){// Add new notification\nthis.queue.push(notification);// Sort by priority and timestamp\nthis.queue.sort((a,b)=>{if(a.priority!==b.priority){return b.priority-a.priority;// Higher priority first\n}return b.timestamp-a.timestamp;// Newer first within same priority\n});// Trim queue if it exceeds max size\nif(this.queue.length>this.maxSize){const toRemove=this.queue.length-this.maxSize;// Remove oldest, lowest priority items\nthis.queue.splice(-toRemove);}// Notify subscribers\nthis.notify(notification);}markAsRead(id){const notification=this.queue.find(n=>n.id===id);if(notification){notification.read=true;this.notify(notification);}}markAllAsRead(){this.queue.forEach(notification=>{notification.read=true;});// Notify for each notification\nthis.queue.forEach(notification=>this.notify(notification));}getUnreadCount(){return this.queue.filter(n=>!n.read).length;}getPioneerNotifications(){return this.queue.filter(n=>n.type==='pioneer');}getNotificationsByCategory(category){return this.queue.filter(n=>n.type==='pioneer'&&n.category===category);}clear(){this.queue=[];this.callbacks.clear();}getAll(){return[...this.queue];}}export const notificationQueue=new NotificationQueue();","map":{"version":3,"names":["audioManager","NotificationQueue","constructor","maxSize","arguments","length","undefined","queue","callbacks","Set","subscribe","callback","add","delete","notify","notification","forEach","addPioneerNotification","title","message","category","confidence","priority","id","Date","now","toString","type","timestamp","read","playPioneerNotification","push","sort","a","b","toRemove","splice","markAsRead","find","n","markAllAsRead","getUnreadCount","filter","getPioneerNotifications","getNotificationsByCategory","clear","getAll","notificationQueue"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/utils/NotificationQueue.ts"],"sourcesContent":["import { audioManager } from './audioUtils';\nimport { PioneerCategory } from '../types';\n\ninterface NotificationItem {\n  id: string;\n  title: string;\n  message: string;\n  type: 'info' | 'success' | 'warning' | 'error' | 'pioneer';\n  category?: PioneerCategory;\n  confidence?: number;\n  timestamp: number;\n  priority: number;\n  read: boolean;\n}\n\nclass NotificationQueue {\n  private queue: NotificationItem[];\n  private maxSize: number;\n  private callbacks: Set<(notification: NotificationItem) => void>;\n\n  constructor(maxSize: number = 100) {\n    this.queue = [];\n    this.maxSize = maxSize;\n    this.callbacks = new Set();\n  }\n\n  public subscribe(callback: (notification: NotificationItem) => void) {\n    this.callbacks.add(callback);\n    return () => {\n      this.callbacks.delete(callback);\n    };\n  }\n\n  private notify(notification: NotificationItem) {\n    this.callbacks.forEach(callback => callback(notification));\n  }\n\n  public addPioneerNotification(\n    title: string,\n    message: string,\n    category: PioneerCategory,\n    confidence: number\n  ) {\n    // Calculate priority based on category and confidence\n    let priority = 1;\n    \n    // Higher priority for high confidence signals\n    if (confidence >= 0.9) priority += 2;\n    else if (confidence >= 0.7) priority += 1;\n\n    // Additional priority for certain categories\n    if (category === 'Protocol_Scout' || category === 'RWA_Innovation') {\n      priority += 1;\n    }\n\n    const notification: NotificationItem = {\n      id: Date.now().toString(),\n      title,\n      message,\n      type: 'pioneer',\n      category,\n      confidence,\n      timestamp: Date.now(),\n      priority,\n      read: false\n    };\n\n    this.add(notification);\n\n    // Play appropriate sound based on category and confidence\n    audioManager.playPioneerNotification(category, confidence);\n  }\n\n  public add(notification: NotificationItem) {\n    // Add new notification\n    this.queue.push(notification);\n\n    // Sort by priority and timestamp\n    this.queue.sort((a, b) => {\n      if (a.priority !== b.priority) {\n        return b.priority - a.priority; // Higher priority first\n      }\n      return b.timestamp - a.timestamp; // Newer first within same priority\n    });\n\n    // Trim queue if it exceeds max size\n    if (this.queue.length > this.maxSize) {\n      const toRemove = this.queue.length - this.maxSize;\n      // Remove oldest, lowest priority items\n      this.queue.splice(-toRemove);\n    }\n\n    // Notify subscribers\n    this.notify(notification);\n  }\n\n  public markAsRead(id: string) {\n    const notification = this.queue.find(n => n.id === id);\n    if (notification) {\n      notification.read = true;\n      this.notify(notification);\n    }\n  }\n\n  public markAllAsRead() {\n    this.queue.forEach(notification => {\n      notification.read = true;\n    });\n    // Notify for each notification\n    this.queue.forEach(notification => this.notify(notification));\n  }\n\n  public getUnreadCount() {\n    return this.queue.filter(n => !n.read).length;\n  }\n\n  public getPioneerNotifications() {\n    return this.queue.filter(n => n.type === 'pioneer');\n  }\n\n  public getNotificationsByCategory(category: PioneerCategory) {\n    return this.queue.filter(\n      n => n.type === 'pioneer' && n.category === category\n    );\n  }\n\n  public clear() {\n    this.queue = [];\n    this.callbacks.clear();\n  }\n\n  public getAll() {\n    return [...this.queue];\n  }\n}\n\nexport const notificationQueue = new NotificationQueue();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}