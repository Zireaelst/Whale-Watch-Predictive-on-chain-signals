{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{ThemeProvider,createTheme}from'@mui/material';import settingsService from'../services/SettingsService';import{getUserFriendlyError}from'../utils/errorHandler';import LoadingSpinner from'../components/LoadingSpinner';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext(undefined);export function useThemeContext(){const context=useContext(ThemeContext);if(!context){throw new Error('useThemeContext must be used within a ThemeProvider');}return context;}export function AppThemeProvider(_ref){let{children}=_ref;const[themeMode,setThemeMode]=useState('light');const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const initializeTheme=async()=>{try{setLoading(true);const settings=await settingsService.getSettings();setThemeMode(settings.appearance.theme);}catch(err){const errorMessage=getUserFriendlyError(err);setError(errorMessage);// Default to light theme if there's an error\nsetThemeMode('light');}finally{setLoading(false);}};initializeTheme();},[]);const theme=React.useMemo(()=>createTheme({palette:{mode:themeMode,primary:{main:'#1976d2'},secondary:{main:'#dc004e'},background:{default:themeMode==='light'?'#f5f5f5':'#121212',paper:themeMode==='light'?'#ffffff':'#1e1e1e'}},components:{MuiAppBar:{styleOverrides:{root:{backgroundColor:themeMode==='light'?'#1976d2':'#272727'}}},MuiDrawer:{styleOverrides:{paper:{backgroundColor:themeMode==='light'?'#ffffff':'#1e1e1e'}}}}}),[themeMode]);const toggleTheme=async()=>{try{const newMode=themeMode==='light'?'dark':'light';await settingsService.updateSettings({appearance:{theme:newMode}});setThemeMode(newMode);}catch(err){const errorMessage=getUserFriendlyError(err);setError(errorMessage);// Show error in UI (you could use a snackbar or other notification)\nconsole.error('Failed to update theme:',errorMessage);}};if(loading){return/*#__PURE__*/_jsx(LoadingSpinner,{message:\"Loading theme...\"});}if(error){// You could add a retry button or other error recovery UI here\nconsole.error('Theme initialization error:',error);}const value={themeMode,toggleTheme,theme};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:value,children:/*#__PURE__*/_jsx(ThemeProvider,{theme:theme,children:children})});}export default ThemeContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ThemeProvider","createTheme","settingsService","getUserFriendlyError","LoadingSpinner","jsx","_jsx","ThemeContext","undefined","useThemeContext","context","Error","AppThemeProvider","_ref","children","themeMode","setThemeMode","loading","setLoading","error","setError","initializeTheme","settings","getSettings","appearance","theme","err","errorMessage","useMemo","palette","mode","primary","main","secondary","background","default","paper","components","MuiAppBar","styleOverrides","root","backgroundColor","MuiDrawer","toggleTheme","newMode","updateSettings","console","message","value","Provider"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ThemeProvider, createTheme, Theme } from '@mui/material';\nimport settingsService from '../services/SettingsService';\nimport { getUserFriendlyError } from '../utils/errorHandler';\nimport LoadingSpinner from '../components/LoadingSpinner';\n\ntype ThemeMode = 'light' | 'dark';\n\ninterface ThemeContextValue {\n  themeMode: ThemeMode;\n  toggleTheme: () => void;\n  theme: Theme;\n}\n\nconst ThemeContext = createContext<ThemeContextValue | undefined>(undefined);\n\nexport function useThemeContext() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useThemeContext must be used within a ThemeProvider');\n  }\n  return context;\n}\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AppThemeProvider({ children }: ThemeProviderProps) {\n  const [themeMode, setThemeMode] = useState<ThemeMode>('light');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const initializeTheme = async () => {\n      try {\n        setLoading(true);\n        const settings = await settingsService.getSettings();\n        setThemeMode(settings.appearance.theme);\n      } catch (err) {\n        const errorMessage = getUserFriendlyError(err);\n        setError(errorMessage);\n        // Default to light theme if there's an error\n        setThemeMode('light');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeTheme();\n  }, []);\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: themeMode,\n          primary: {\n            main: '#1976d2',\n          },\n          secondary: {\n            main: '#dc004e',\n          },\n          background: {\n            default: themeMode === 'light' ? '#f5f5f5' : '#121212',\n            paper: themeMode === 'light' ? '#ffffff' : '#1e1e1e',\n          },\n        },\n        components: {\n          MuiAppBar: {\n            styleOverrides: {\n              root: {\n                backgroundColor: themeMode === 'light' ? '#1976d2' : '#272727',\n              },\n            },\n          },\n          MuiDrawer: {\n            styleOverrides: {\n              paper: {\n                backgroundColor: themeMode === 'light' ? '#ffffff' : '#1e1e1e',\n              },\n            },\n          },\n        },\n      }),\n    [themeMode]\n  );\n\n  const toggleTheme = async () => {\n    try {\n      const newMode = themeMode === 'light' ? 'dark' : 'light';\n      await settingsService.updateSettings({\n        appearance: { theme: newMode },\n      });\n      setThemeMode(newMode);\n    } catch (err) {\n      const errorMessage = getUserFriendlyError(err);\n      setError(errorMessage);\n      // Show error in UI (you could use a snackbar or other notification)\n      console.error('Failed to update theme:', errorMessage);\n    }\n  };\n\n  if (loading) {\n    return <LoadingSpinner message=\"Loading theme...\" />;\n  }\n\n  if (error) {\n    // You could add a retry button or other error recovery UI here\n    console.error('Theme initialization error:', error);\n  }\n\n  const value = {\n    themeMode,\n    toggleTheme,\n    theme,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default ThemeContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}