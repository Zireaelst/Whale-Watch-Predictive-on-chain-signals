{"ast":null,"code":"export const KEYBOARD_SHORTCUTS = [\n// Global Shortcuts\n{\n  key: '?',\n  description: 'Show keyboard shortcuts',\n  category: 'Global',\n  action: () => {\n    window.dispatchEvent(new Event('toggle-shortcuts-help'));\n  }\n}, {\n  key: 'Escape',\n  description: 'Close current dialog/modal',\n  category: 'Global',\n  action: () => {\n    window.dispatchEvent(new Event('close-current-dialog'));\n  }\n}, {\n  key: 'n',\n  description: 'Toggle notification center',\n  category: 'Global',\n  action: () => {\n    window.dispatchEvent(new Event('toggle-notifications'));\n  }\n}, {\n  key: 's',\n  description: 'Open settings',\n  category: 'Global',\n  action: () => {\n    window.dispatchEvent(new Event('open-settings'));\n  }\n}, {\n  key: 'm',\n  description: 'Toggle sound notifications',\n  category: 'Global',\n  action: () => {\n    window.dispatchEvent(new Event('toggle-sound'));\n  }\n},\n// Pioneer Monitor Shortcuts\n{\n  key: 'p',\n  description: 'Open Pioneer Monitor',\n  category: 'Navigation',\n  ctrlKey: true\n}, {\n  key: '1',\n  description: 'Switch to Overview Tab',\n  category: 'Pioneer Monitor',\n  altKey: true\n}, {\n  key: '2',\n  description: 'Switch to Pioneers Tab',\n  category: 'Pioneer Monitor',\n  altKey: true\n}, {\n  key: '3',\n  description: 'Switch to Signals Tab',\n  category: 'Pioneer Monitor',\n  altKey: true\n}, {\n  key: 'f',\n  description: 'Toggle Filters Panel',\n  category: 'Pioneer Monitor',\n  altKey: true\n}, {\n  key: 's',\n  description: 'Toggle Settings Panel',\n  category: 'Pioneer Monitor',\n  altKey: true\n}, {\n  key: 'r',\n  description: 'Refresh Pioneer Data',\n  category: 'Pioneer Monitor',\n  altKey: true\n}];\nclass KeyboardShortcutsManager {\n  constructor() {\n    this.enabled = false;\n    this.handleKeyPress = event => {\n      const shortcut = KEYBOARD_SHORTCUTS.find(s => s.key === event.key && !!s.ctrlKey === event.ctrlKey && !!s.altKey === event.altKey);\n      if (shortcut !== null && shortcut !== void 0 && shortcut.action) {\n        event.preventDefault();\n        shortcut.action();\n      }\n    };\n  }\n  enable() {\n    if (this.enabled) return;\n    this.enabled = true;\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n  cleanup() {\n    this.enabled = false;\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n}\nexport const keyboardShortcuts = new KeyboardShortcutsManager();","map":{"version":3,"names":["KEYBOARD_SHORTCUTS","key","description","category","action","window","dispatchEvent","Event","ctrlKey","altKey","KeyboardShortcutsManager","constructor","enabled","handleKeyPress","event","shortcut","find","s","preventDefault","enable","document","addEventListener","cleanup","removeEventListener","keyboardShortcuts"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/utils/keyboardShortcuts.ts"],"sourcesContent":["import { KeyboardShortcut } from '../types';\n\nexport const KEYBOARD_SHORTCUTS: KeyboardShortcut[] = [\n  // Global Shortcuts\n  {\n    key: '?',\n    description: 'Show keyboard shortcuts',\n    category: 'Global',\n    action: () => {\n      window.dispatchEvent(new Event('toggle-shortcuts-help'));\n    },\n  },\n  {\n    key: 'Escape',\n    description: 'Close current dialog/modal',\n    category: 'Global',\n    action: () => {\n      window.dispatchEvent(new Event('close-current-dialog'));\n    },\n  },\n  {\n    key: 'n',\n    description: 'Toggle notification center',\n    category: 'Global',\n    action: () => {\n      window.dispatchEvent(new Event('toggle-notifications'));\n    },\n  },\n  {\n    key: 's',\n    description: 'Open settings',\n    category: 'Global',\n    action: () => {\n      window.dispatchEvent(new Event('open-settings'));\n    },\n  },\n  {\n    key: 'm',\n    description: 'Toggle sound notifications',\n    category: 'Global',\n    action: () => {\n      window.dispatchEvent(new Event('toggle-sound'));\n    },\n  },\n\n  // Pioneer Monitor Shortcuts\n  {\n    key: 'p',\n    description: 'Open Pioneer Monitor',\n    category: 'Navigation',\n    ctrlKey: true\n  },\n  {\n    key: '1',\n    description: 'Switch to Overview Tab',\n    category: 'Pioneer Monitor',\n    altKey: true\n  },\n  {\n    key: '2',\n    description: 'Switch to Pioneers Tab',\n    category: 'Pioneer Monitor',\n    altKey: true\n  },\n  {\n    key: '3',\n    description: 'Switch to Signals Tab',\n    category: 'Pioneer Monitor',\n    altKey: true\n  },\n  {\n    key: 'f',\n    description: 'Toggle Filters Panel',\n    category: 'Pioneer Monitor',\n    altKey: true\n  },\n  {\n    key: 's',\n    description: 'Toggle Settings Panel',\n    category: 'Pioneer Monitor',\n    altKey: true\n  },\n  {\n    key: 'r',\n    description: 'Refresh Pioneer Data',\n    category: 'Pioneer Monitor',\n    altKey: true\n  }\n];\n\nclass KeyboardShortcutsManager {\n    private enabled = false;\n\n    enable() {\n        if (this.enabled) return;\n        this.enabled = true;\n        document.addEventListener('keydown', this.handleKeyPress);\n    }\n\n    cleanup() {\n        this.enabled = false;\n        document.removeEventListener('keydown', this.handleKeyPress);\n    }\n\n    private handleKeyPress = (event: KeyboardEvent) => {\n        const shortcut = KEYBOARD_SHORTCUTS.find(s => \n            s.key === event.key && \n            !!s.ctrlKey === event.ctrlKey && \n            !!s.altKey === event.altKey\n        );\n\n        if (shortcut?.action) {\n            event.preventDefault();\n            shortcut.action();\n        }\n    };\n}\n\nexport const keyboardShortcuts = new KeyboardShortcutsManager();"],"mappings":"AAEA,OAAO,MAAMA,kBAAsC,GAAG;AACpD;AACA;EACEC,GAAG,EAAE,GAAG;EACRC,WAAW,EAAE,yBAAyB;EACtCC,QAAQ,EAAE,QAAQ;EAClBC,MAAM,EAAEA,CAAA,KAAM;IACZC,MAAM,CAACC,aAAa,CAAC,IAAIC,KAAK,CAAC,uBAAuB,CAAC,CAAC;EAC1D;AACF,CAAC,EACD;EACEN,GAAG,EAAE,QAAQ;EACbC,WAAW,EAAE,4BAA4B;EACzCC,QAAQ,EAAE,QAAQ;EAClBC,MAAM,EAAEA,CAAA,KAAM;IACZC,MAAM,CAACC,aAAa,CAAC,IAAIC,KAAK,CAAC,sBAAsB,CAAC,CAAC;EACzD;AACF,CAAC,EACD;EACEN,GAAG,EAAE,GAAG;EACRC,WAAW,EAAE,4BAA4B;EACzCC,QAAQ,EAAE,QAAQ;EAClBC,MAAM,EAAEA,CAAA,KAAM;IACZC,MAAM,CAACC,aAAa,CAAC,IAAIC,KAAK,CAAC,sBAAsB,CAAC,CAAC;EACzD;AACF,CAAC,EACD;EACEN,GAAG,EAAE,GAAG;EACRC,WAAW,EAAE,eAAe;EAC5BC,QAAQ,EAAE,QAAQ;EAClBC,MAAM,EAAEA,CAAA,KAAM;IACZC,MAAM,CAACC,aAAa,CAAC,IAAIC,KAAK,CAAC,eAAe,CAAC,CAAC;EAClD;AACF,CAAC,EACD;EACEN,GAAG,EAAE,GAAG;EACRC,WAAW,EAAE,4BAA4B;EACzCC,QAAQ,EAAE,QAAQ;EAClBC,MAAM,EAAEA,CAAA,KAAM;IACZC,MAAM,CAACC,aAAa,CAAC,IAAIC,KAAK,CAAC,cAAc,CAAC,CAAC;EACjD;AACF,CAAC;AAED;AACA;EACEN,GAAG,EAAE,GAAG;EACRC,WAAW,EAAE,sBAAsB;EACnCC,QAAQ,EAAE,YAAY;EACtBK,OAAO,EAAE;AACX,CAAC,EACD;EACEP,GAAG,EAAE,GAAG;EACRC,WAAW,EAAE,wBAAwB;EACrCC,QAAQ,EAAE,iBAAiB;EAC3BM,MAAM,EAAE;AACV,CAAC,EACD;EACER,GAAG,EAAE,GAAG;EACRC,WAAW,EAAE,wBAAwB;EACrCC,QAAQ,EAAE,iBAAiB;EAC3BM,MAAM,EAAE;AACV,CAAC,EACD;EACER,GAAG,EAAE,GAAG;EACRC,WAAW,EAAE,uBAAuB;EACpCC,QAAQ,EAAE,iBAAiB;EAC3BM,MAAM,EAAE;AACV,CAAC,EACD;EACER,GAAG,EAAE,GAAG;EACRC,WAAW,EAAE,sBAAsB;EACnCC,QAAQ,EAAE,iBAAiB;EAC3BM,MAAM,EAAE;AACV,CAAC,EACD;EACER,GAAG,EAAE,GAAG;EACRC,WAAW,EAAE,uBAAuB;EACpCC,QAAQ,EAAE,iBAAiB;EAC3BM,MAAM,EAAE;AACV,CAAC,EACD;EACER,GAAG,EAAE,GAAG;EACRC,WAAW,EAAE,sBAAsB;EACnCC,QAAQ,EAAE,iBAAiB;EAC3BM,MAAM,EAAE;AACV,CAAC,CACF;AAED,MAAMC,wBAAwB,CAAC;EAAAC,YAAA;IAAA,KACnBC,OAAO,GAAG,KAAK;IAAA,KAafC,cAAc,GAAIC,KAAoB,IAAK;MAC/C,MAAMC,QAAQ,GAAGf,kBAAkB,CAACgB,IAAI,CAACC,CAAC,IACtCA,CAAC,CAAChB,GAAG,KAAKa,KAAK,CAACb,GAAG,IACnB,CAAC,CAACgB,CAAC,CAACT,OAAO,KAAKM,KAAK,CAACN,OAAO,IAC7B,CAAC,CAACS,CAAC,CAACR,MAAM,KAAKK,KAAK,CAACL,MACzB,CAAC;MAED,IAAIM,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEX,MAAM,EAAE;QAClBU,KAAK,CAACI,cAAc,CAAC,CAAC;QACtBH,QAAQ,CAACX,MAAM,CAAC,CAAC;MACrB;IACJ,CAAC;EAAA;EAtBDe,MAAMA,CAAA,EAAG;IACL,IAAI,IAAI,CAACP,OAAO,EAAE;IAClB,IAAI,CAACA,OAAO,GAAG,IAAI;IACnBQ,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACR,cAAc,CAAC;EAC7D;EAEAS,OAAOA,CAAA,EAAG;IACN,IAAI,CAACV,OAAO,GAAG,KAAK;IACpBQ,QAAQ,CAACG,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACV,cAAc,CAAC;EAChE;AAcJ;AAEA,OAAO,MAAMW,iBAAiB,GAAG,IAAId,wBAAwB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}