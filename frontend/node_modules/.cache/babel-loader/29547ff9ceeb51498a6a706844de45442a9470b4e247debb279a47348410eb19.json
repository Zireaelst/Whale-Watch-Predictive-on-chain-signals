{"ast":null,"code":"import{notificationQueue}from'./NotificationQueue';export class ErrorHandler{static handleError(error){let errorDetails;if(error instanceof Error){errorDetails=this.parseError(error);}else{errorDetails=error;}// Log error for debugging\nconsole.error('Error:',errorDetails);// Get error message and priority\nconst message=this.ERROR_MESSAGES[errorDetails.code]||errorDetails.message;const priority=this.ERROR_PRIORITIES[errorDetails.code]||1;// Add error notification\nnotificationQueue.add({id:Date.now().toString(),title:'Error',message,type:'error',timestamp:Date.now(),priority,read:false});return errorDetails;}static parseError(error){// Parse known error patterns\nif(error.message.includes('wallet not found')){return{code:'PIONEER_NOT_FOUND',message:error.message};}if(error.message.includes('invalid category')){return{code:'INVALID_PIONEER_CATEGORY',message:error.message};}if(error.message.includes('insufficient transactions')){return{code:'INSUFFICIENT_TRANSACTIONS',message:error.message};}// Network errors\nif(error.message.includes('network')||error.message.includes('Network Error')){return{code:'NETWORK_ERROR',message:error.message};}// API errors\nif(error.message.includes('API')||error.message.includes('status code')){return{code:'API_ERROR',message:error.message};}// Validation errors\nif(error.message.includes('validation')||error.message.includes('invalid')){return{code:'VALIDATION_ERROR',message:error.message};}// Default unknown error\nreturn{code:'UNKNOWN_ERROR',message:error.message};}static handlePioneerError(error,context){let errorDetails;// Pioneer-specific error parsing\nif(error.message.includes('metrics')){errorDetails={code:'METRICS_UPDATE_FAILED',message:error.message,context};}else if(error.message.includes('protocol discovery')){errorDetails={code:'PROTOCOL_DISCOVERY_FAILED',message:error.message,context};}else if(error.message.includes('strategy deployment')){errorDetails={code:'STRATEGY_DEPLOYMENT_FAILED',message:error.message,context};}else if(error.message.includes('chain activity')){errorDetails={code:'CHAIN_ACTIVITY_FAILED',message:error.message,context};}else{errorDetails=this.parseError(error);}return this.handleError(errorDetails);}static isRecoverable(errorCode){const unrecoverableErrors=['PIONEER_NOT_FOUND','INVALID_PIONEER_CATEGORY','INSUFFICIENT_TRANSACTIONS'];return!unrecoverableErrors.includes(errorCode);}}ErrorHandler.ERROR_MESSAGES={// Pioneer-specific error codes\nPIONEER_NOT_FOUND:'Pioneer wallet not found',INVALID_PIONEER_CATEGORY:'Invalid pioneer category',INSUFFICIENT_TRANSACTIONS:'Insufficient transactions to qualify as pioneer',METRICS_UPDATE_FAILED:'Failed to update pioneer metrics',PROTOCOL_DISCOVERY_FAILED:'Failed to record protocol discovery',STRATEGY_DEPLOYMENT_FAILED:'Failed to record strategy deployment',CHAIN_ACTIVITY_FAILED:'Failed to update chain activity',// Generic error codes\nNETWORK_ERROR:'Network connection error',API_ERROR:'API request failed',VALIDATION_ERROR:'Invalid input data',UNKNOWN_ERROR:'An unknown error occurred'};ErrorHandler.ERROR_PRIORITIES={PIONEER_NOT_FOUND:2,INVALID_PIONEER_CATEGORY:2,INSUFFICIENT_TRANSACTIONS:1,METRICS_UPDATE_FAILED:3,PROTOCOL_DISCOVERY_FAILED:3,STRATEGY_DEPLOYMENT_FAILED:3,CHAIN_ACTIVITY_FAILED:2,NETWORK_ERROR:3,API_ERROR:3,VALIDATION_ERROR:2,UNKNOWN_ERROR:1};","map":{"version":3,"names":["notificationQueue","ErrorHandler","handleError","error","errorDetails","Error","parseError","console","message","ERROR_MESSAGES","code","priority","ERROR_PRIORITIES","add","id","Date","now","toString","title","type","timestamp","read","includes","handlePioneerError","context","isRecoverable","errorCode","unrecoverableErrors","PIONEER_NOT_FOUND","INVALID_PIONEER_CATEGORY","INSUFFICIENT_TRANSACTIONS","METRICS_UPDATE_FAILED","PROTOCOL_DISCOVERY_FAILED","STRATEGY_DEPLOYMENT_FAILED","CHAIN_ACTIVITY_FAILED","NETWORK_ERROR","API_ERROR","VALIDATION_ERROR","UNKNOWN_ERROR"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/utils/errorHandler.ts"],"sourcesContent":["import { notificationQueue } from './NotificationQueue';\n\ninterface ErrorDetails {\n  code: string;\n  message: string;\n  context?: Record<string, any>;\n}\n\nexport class ErrorHandler {\n  private static readonly ERROR_MESSAGES = {\n    // Pioneer-specific error codes\n    PIONEER_NOT_FOUND: 'Pioneer wallet not found',\n    INVALID_PIONEER_CATEGORY: 'Invalid pioneer category',\n    INSUFFICIENT_TRANSACTIONS: 'Insufficient transactions to qualify as pioneer',\n    METRICS_UPDATE_FAILED: 'Failed to update pioneer metrics',\n    PROTOCOL_DISCOVERY_FAILED: 'Failed to record protocol discovery',\n    STRATEGY_DEPLOYMENT_FAILED: 'Failed to record strategy deployment',\n    CHAIN_ACTIVITY_FAILED: 'Failed to update chain activity',\n    \n    // Generic error codes\n    NETWORK_ERROR: 'Network connection error',\n    API_ERROR: 'API request failed',\n    VALIDATION_ERROR: 'Invalid input data',\n    UNKNOWN_ERROR: 'An unknown error occurred'\n  };\n\n  private static readonly ERROR_PRIORITIES = {\n    PIONEER_NOT_FOUND: 2,\n    INVALID_PIONEER_CATEGORY: 2,\n    INSUFFICIENT_TRANSACTIONS: 1,\n    METRICS_UPDATE_FAILED: 3,\n    PROTOCOL_DISCOVERY_FAILED: 3,\n    STRATEGY_DEPLOYMENT_FAILED: 3,\n    CHAIN_ACTIVITY_FAILED: 2,\n    NETWORK_ERROR: 3,\n    API_ERROR: 3,\n    VALIDATION_ERROR: 2,\n    UNKNOWN_ERROR: 1\n  };\n\n  public static handleError(error: Error | ErrorDetails) {\n    let errorDetails: ErrorDetails;\n\n    if (error instanceof Error) {\n      errorDetails = this.parseError(error);\n    } else {\n      errorDetails = error;\n    }\n\n    // Log error for debugging\n    console.error('Error:', errorDetails);\n\n    // Get error message and priority\n    const message = this.ERROR_MESSAGES[errorDetails.code] || errorDetails.message;\n    const priority = this.ERROR_PRIORITIES[errorDetails.code] || 1;\n\n    // Add error notification\n    notificationQueue.add({\n      id: Date.now().toString(),\n      title: 'Error',\n      message,\n      type: 'error',\n      timestamp: Date.now(),\n      priority,\n      read: false\n    });\n\n    return errorDetails;\n  }\n\n  private static parseError(error: Error): ErrorDetails {\n    // Parse known error patterns\n    if (error.message.includes('wallet not found')) {\n      return {\n        code: 'PIONEER_NOT_FOUND',\n        message: error.message\n      };\n    }\n\n    if (error.message.includes('invalid category')) {\n      return {\n        code: 'INVALID_PIONEER_CATEGORY',\n        message: error.message\n      };\n    }\n\n    if (error.message.includes('insufficient transactions')) {\n      return {\n        code: 'INSUFFICIENT_TRANSACTIONS',\n        message: error.message\n      };\n    }\n\n    // Network errors\n    if (error.message.includes('network') || error.message.includes('Network Error')) {\n      return {\n        code: 'NETWORK_ERROR',\n        message: error.message\n      };\n    }\n\n    // API errors\n    if (error.message.includes('API') || error.message.includes('status code')) {\n      return {\n        code: 'API_ERROR',\n        message: error.message\n      };\n    }\n\n    // Validation errors\n    if (error.message.includes('validation') || error.message.includes('invalid')) {\n      return {\n        code: 'VALIDATION_ERROR',\n        message: error.message\n      };\n    }\n\n    // Default unknown error\n    return {\n      code: 'UNKNOWN_ERROR',\n      message: error.message\n    };\n  }\n\n  public static handlePioneerError(error: Error, context?: Record<string, any>): ErrorDetails {\n    let errorDetails: ErrorDetails;\n\n    // Pioneer-specific error parsing\n    if (error.message.includes('metrics')) {\n      errorDetails = {\n        code: 'METRICS_UPDATE_FAILED',\n        message: error.message,\n        context\n      };\n    } else if (error.message.includes('protocol discovery')) {\n      errorDetails = {\n        code: 'PROTOCOL_DISCOVERY_FAILED',\n        message: error.message,\n        context\n      };\n    } else if (error.message.includes('strategy deployment')) {\n      errorDetails = {\n        code: 'STRATEGY_DEPLOYMENT_FAILED',\n        message: error.message,\n        context\n      };\n    } else if (error.message.includes('chain activity')) {\n      errorDetails = {\n        code: 'CHAIN_ACTIVITY_FAILED',\n        message: error.message,\n        context\n      };\n    } else {\n      errorDetails = this.parseError(error);\n    }\n\n    return this.handleError(errorDetails);\n  }\n\n  public static isRecoverable(errorCode: string): boolean {\n    const unrecoverableErrors = [\n      'PIONEER_NOT_FOUND',\n      'INVALID_PIONEER_CATEGORY',\n      'INSUFFICIENT_TRANSACTIONS'\n    ];\n    return !unrecoverableErrors.includes(errorCode);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}