{"ast":null,"code":"export const KEYBOARD_SHORTCUTS=[// Global Shortcuts\n{key:'?',description:'Show keyboard shortcuts',category:'Global',action:()=>{window.dispatchEvent(new Event('toggle-shortcuts-help'));}},{key:'Escape',description:'Close current dialog/modal',category:'Global',action:()=>{window.dispatchEvent(new Event('close-current-dialog'));}},{key:'n',description:'Toggle notification center',category:'Global',action:()=>{window.dispatchEvent(new Event('toggle-notifications'));}},{key:'s',description:'Open settings',category:'Global',action:()=>{window.dispatchEvent(new Event('open-settings'));}},{key:'m',description:'Toggle sound notifications',category:'Global',action:()=>{window.dispatchEvent(new Event('toggle-sound'));}},// Pioneer Monitor Shortcuts\n{key:'p',description:'Open Pioneer Monitor',category:'Navigation',ctrlKey:true},{key:'1',description:'Switch to Overview Tab',category:'Pioneer Monitor',altKey:true},{key:'2',description:'Switch to Pioneers Tab',category:'Pioneer Monitor',altKey:true},{key:'3',description:'Switch to Signals Tab',category:'Pioneer Monitor',altKey:true},{key:'f',description:'Toggle Filters Panel',category:'Pioneer Monitor',altKey:true},{key:'s',description:'Toggle Settings Panel',category:'Pioneer Monitor',altKey:true},{key:'r',description:'Refresh Pioneer Data',category:'Pioneer Monitor',altKey:true}];class KeyboardShortcutsManager{constructor(){this.enabled=false;this.registeredShortcuts=new Map();this.handleKeyPress=event=>{// Check registered shortcuts first\nfor(const shortcut of this.registeredShortcuts.values()){if(shortcut.key.toLowerCase()===event.key.toLowerCase()&&!!shortcut.ctrlKey===event.ctrlKey&&!!shortcut.altKey===event.altKey&&!!shortcut.shiftKey===event.shiftKey){event.preventDefault();shortcut.action();return;}}// Then check predefined shortcuts\nconst shortcut=KEYBOARD_SHORTCUTS.find(s=>s.key.toLowerCase()===event.key.toLowerCase()&&!!s.ctrlKey===event.ctrlKey&&!!s.altKey===event.altKey&&!!s.shiftKey===event.shiftKey);if(shortcut!==null&&shortcut!==void 0&&shortcut.action){event.preventDefault();shortcut.action();}};}enable(){if(this.enabled)return;this.enabled=true;document.addEventListener('keydown',this.handleKeyPress);}cleanup(){this.enabled=false;document.removeEventListener('keydown',this.handleKeyPress);this.registeredShortcuts.clear();}getShortcuts(){return[...KEYBOARD_SHORTCUTS,...Array.from(this.registeredShortcuts.values())];}register(shortcutKey,action,description){const[key,...modifiers]=shortcutKey.toLowerCase().split('+').reverse();const shortcut={key,description,category:'Dynamic',action,ctrlKey:modifiers.includes('ctrl'),altKey:modifiers.includes('alt'),shiftKey:modifiers.includes('shift')};this.registeredShortcuts.set(shortcutKey,shortcut);}unregister(shortcutKey){this.registeredShortcuts.delete(shortcutKey);}}export const keyboardShortcuts=new KeyboardShortcutsManager();","map":{"version":3,"names":["KEYBOARD_SHORTCUTS","key","description","category","action","window","dispatchEvent","Event","ctrlKey","altKey","KeyboardShortcutsManager","constructor","enabled","registeredShortcuts","Map","handleKeyPress","event","shortcut","values","toLowerCase","shiftKey","preventDefault","find","s","enable","document","addEventListener","cleanup","removeEventListener","clear","getShortcuts","Array","from","register","shortcutKey","modifiers","split","reverse","includes","set","unregister","delete","keyboardShortcuts"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/utils/keyboardShortcuts.ts"],"sourcesContent":["import { KeyboardShortcut } from '../types';\n\nexport const KEYBOARD_SHORTCUTS: KeyboardShortcut[] = [\n    // Global Shortcuts\n    {\n        key: '?',\n        description: 'Show keyboard shortcuts',\n        category: 'Global',\n        action: () => {\n            window.dispatchEvent(new Event('toggle-shortcuts-help'));\n        },\n    },\n    {\n        key: 'Escape',\n        description: 'Close current dialog/modal',\n        category: 'Global',\n        action: () => {\n            window.dispatchEvent(new Event('close-current-dialog'));\n        },\n    },\n    {\n        key: 'n',\n        description: 'Toggle notification center',\n        category: 'Global',\n        action: () => {\n            window.dispatchEvent(new Event('toggle-notifications'));\n        },\n    },\n    {\n        key: 's',\n        description: 'Open settings',\n        category: 'Global',\n        action: () => {\n            window.dispatchEvent(new Event('open-settings'));\n        },\n    },\n    {\n        key: 'm',\n        description: 'Toggle sound notifications',\n        category: 'Global',\n        action: () => {\n            window.dispatchEvent(new Event('toggle-sound'));\n        },\n    },\n\n    // Pioneer Monitor Shortcuts\n    {\n        key: 'p',\n        description: 'Open Pioneer Monitor',\n        category: 'Navigation',\n        ctrlKey: true\n    },\n    {\n        key: '1',\n        description: 'Switch to Overview Tab',\n        category: 'Pioneer Monitor',\n        altKey: true\n    },\n    {\n        key: '2',\n        description: 'Switch to Pioneers Tab',\n        category: 'Pioneer Monitor',\n        altKey: true\n    },\n    {\n        key: '3',\n        description: 'Switch to Signals Tab',\n        category: 'Pioneer Monitor',\n        altKey: true\n    },\n    {\n        key: 'f',\n        description: 'Toggle Filters Panel',\n        category: 'Pioneer Monitor',\n        altKey: true\n    },\n    {\n        key: 's',\n        description: 'Toggle Settings Panel',\n        category: 'Pioneer Monitor',\n        altKey: true\n    },\n    {\n        key: 'r',\n        description: 'Refresh Pioneer Data',\n        category: 'Pioneer Monitor',\n        altKey: true\n    }\n];\n\nclass KeyboardShortcutsManager {\n    private enabled = false;\n    private registeredShortcuts = new Map<string, KeyboardShortcut>();\n\n    enable() {\n        if (this.enabled) return;\n        this.enabled = true;\n        document.addEventListener('keydown', this.handleKeyPress);\n    }\n\n    cleanup() {\n        this.enabled = false;\n        document.removeEventListener('keydown', this.handleKeyPress);\n        this.registeredShortcuts.clear();\n    }\n\n    getShortcuts() {\n        return [...KEYBOARD_SHORTCUTS, ...Array.from(this.registeredShortcuts.values())];\n    }\n\n    register(shortcutKey: string, action: () => void, description: string) {\n        const [key, ...modifiers] = shortcutKey.toLowerCase().split('+').reverse();\n        const shortcut: KeyboardShortcut = {\n            key,\n            description,\n            category: 'Dynamic',\n            action,\n            ctrlKey: modifiers.includes('ctrl'),\n            altKey: modifiers.includes('alt'),\n            shiftKey: modifiers.includes('shift')\n        };\n        this.registeredShortcuts.set(shortcutKey, shortcut);\n    }\n\n    unregister(shortcutKey: string) {\n        this.registeredShortcuts.delete(shortcutKey);\n    }\n\n    private handleKeyPress = (event: KeyboardEvent) => {\n        // Check registered shortcuts first\n        for (const shortcut of this.registeredShortcuts.values()) {\n            if (\n                shortcut.key.toLowerCase() === event.key.toLowerCase() &&\n                !!shortcut.ctrlKey === event.ctrlKey &&\n                !!shortcut.altKey === event.altKey &&\n                !!shortcut.shiftKey === event.shiftKey\n            ) {\n                event.preventDefault();\n                shortcut.action();\n                return;\n            }\n        }\n\n        // Then check predefined shortcuts\n        const shortcut = KEYBOARD_SHORTCUTS.find(s =>\n            s.key.toLowerCase() === event.key.toLowerCase() &&\n            !!s.ctrlKey === event.ctrlKey &&\n            !!s.altKey === event.altKey &&\n            !!s.shiftKey === event.shiftKey\n        );\n\n        if (shortcut?.action) {\n            event.preventDefault();\n            shortcut.action();\n        }\n    };\n}\n\nexport const keyboardShortcuts = new KeyboardShortcutsManager();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}