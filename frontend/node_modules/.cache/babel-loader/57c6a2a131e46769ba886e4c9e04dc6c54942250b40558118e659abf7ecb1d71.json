{"ast":null,"code":"var _jsxFileName = \"/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/context/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material';\nimport settingsService from '../services/SettingsService';\nimport { getUserFriendlyError } from '../utils/errorHandler';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport function useThemeContext() {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useThemeContext must be used within a ThemeProvider');\n  }\n  return context;\n}\n_s(useThemeContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function AppThemeProvider({\n  children\n}) {\n  _s2();\n  const [themeMode, setThemeMode] = useState('light');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const initializeTheme = async () => {\n      try {\n        setLoading(true);\n        const settings = await settingsService.getSettings();\n        setThemeMode(settings.appearance.theme);\n      } catch (err) {\n        const errorMessage = getUserFriendlyError(err);\n        setError(errorMessage);\n        // Default to light theme if there's an error\n        setThemeMode('light');\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeTheme();\n  }, []);\n  const theme = React.useMemo(() => createTheme({\n    palette: {\n      mode: themeMode,\n      primary: {\n        main: '#1976d2'\n      },\n      secondary: {\n        main: '#dc004e'\n      },\n      background: {\n        default: themeMode === 'light' ? '#f5f5f5' : '#121212',\n        paper: themeMode === 'light' ? '#ffffff' : '#1e1e1e'\n      }\n    },\n    components: {\n      MuiAppBar: {\n        styleOverrides: {\n          root: {\n            backgroundColor: themeMode === 'light' ? '#1976d2' : '#272727'\n          }\n        }\n      },\n      MuiDrawer: {\n        styleOverrides: {\n          paper: {\n            backgroundColor: themeMode === 'light' ? '#ffffff' : '#1e1e1e'\n          }\n        }\n      }\n    }\n  }), [themeMode]);\n  const toggleTheme = async () => {\n    try {\n      const newMode = themeMode === 'light' ? 'dark' : 'light';\n      await settingsService.updateSettings({\n        appearance: {\n          theme: newMode\n        }\n      });\n      setThemeMode(newMode);\n    } catch (err) {\n      const errorMessage = getUserFriendlyError(err);\n      setError(errorMessage);\n      // Show error in UI (you could use a snackbar or other notification)\n      console.error('Failed to update theme:', errorMessage);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n      message: \"Loading theme...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    // You could add a retry button or other error recovery UI here\n    console.error('Theme initialization error:', error);\n  }\n  const value = {\n    themeMode,\n    toggleTheme,\n    theme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n_s2(AppThemeProvider, \"BbAbdOwewQvJGwmulhmTjLWUTA8=\");\n_c = AppThemeProvider;\nexport default ThemeContext;\nvar _c;\n$RefreshReg$(_c, \"AppThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ThemeProvider","createTheme","settingsService","getUserFriendlyError","LoadingSpinner","jsxDEV","_jsxDEV","ThemeContext","undefined","useThemeContext","_s","context","Error","AppThemeProvider","children","_s2","themeMode","setThemeMode","loading","setLoading","error","setError","initializeTheme","settings","getSettings","appearance","theme","err","errorMessage","useMemo","palette","mode","primary","main","secondary","background","default","paper","components","MuiAppBar","styleOverrides","root","backgroundColor","MuiDrawer","toggleTheme","newMode","updateSettings","console","message","fileName","_jsxFileName","lineNumber","columnNumber","value","Provider","_c","$RefreshReg$"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ThemeProvider, createTheme, Theme } from '@mui/material';\nimport settingsService from '../services/SettingsService';\nimport { getUserFriendlyError } from '../utils/errorHandler';\nimport LoadingSpinner from '../components/LoadingSpinner';\n\ntype ThemeMode = 'light' | 'dark';\n\ninterface ThemeContextValue {\n  themeMode: ThemeMode;\n  toggleTheme: () => void;\n  theme: Theme;\n}\n\nconst ThemeContext = createContext<ThemeContextValue | undefined>(undefined);\n\nexport function useThemeContext() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useThemeContext must be used within a ThemeProvider');\n  }\n  return context;\n}\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AppThemeProvider({ children }: ThemeProviderProps) {\n  const [themeMode, setThemeMode] = useState<ThemeMode>('light');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const initializeTheme = async () => {\n      try {\n        setLoading(true);\n        const settings = await settingsService.getSettings();\n        setThemeMode(settings.appearance.theme);\n      } catch (err) {\n        const errorMessage = getUserFriendlyError(err);\n        setError(errorMessage);\n        // Default to light theme if there's an error\n        setThemeMode('light');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeTheme();\n  }, []);\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: themeMode,\n          primary: {\n            main: '#1976d2',\n          },\n          secondary: {\n            main: '#dc004e',\n          },\n          background: {\n            default: themeMode === 'light' ? '#f5f5f5' : '#121212',\n            paper: themeMode === 'light' ? '#ffffff' : '#1e1e1e',\n          },\n        },\n        components: {\n          MuiAppBar: {\n            styleOverrides: {\n              root: {\n                backgroundColor: themeMode === 'light' ? '#1976d2' : '#272727',\n              },\n            },\n          },\n          MuiDrawer: {\n            styleOverrides: {\n              paper: {\n                backgroundColor: themeMode === 'light' ? '#ffffff' : '#1e1e1e',\n              },\n            },\n          },\n        },\n      }),\n    [themeMode]\n  );\n\n  const toggleTheme = async () => {\n    try {\n      const newMode = themeMode === 'light' ? 'dark' : 'light';\n      await settingsService.updateSettings({\n        appearance: { theme: newMode },\n      });\n      setThemeMode(newMode);\n    } catch (err) {\n      const errorMessage = getUserFriendlyError(err);\n      setError(errorMessage);\n      // Show error in UI (you could use a snackbar or other notification)\n      console.error('Failed to update theme:', errorMessage);\n    }\n  };\n\n  if (loading) {\n    return <LoadingSpinner message=\"Loading theme...\" />;\n  }\n\n  if (error) {\n    // You could add a retry button or other error recovery UI here\n    console.error('Theme initialization error:', error);\n  }\n\n  const value = {\n    themeMode,\n    toggleTheme,\n    theme,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default ThemeContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}