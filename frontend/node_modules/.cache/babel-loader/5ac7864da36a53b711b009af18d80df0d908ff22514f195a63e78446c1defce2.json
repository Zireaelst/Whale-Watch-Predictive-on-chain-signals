{"ast":null,"code":"// Map of audio files for different notification types\nconst audioFiles = {\n  notification: '/sounds/notification.mp3',\n  alert: '/sounds/alert.mp3',\n  connect: '/sounds/connect.mp3',\n  disconnect: '/sounds/disconnect.mp3',\n  pioneer_discovery: '/audio/pioneer_discovery.mp3',\n  pioneer_strategy: '/audio/pioneer_strategy.mp3',\n  pioneer_success: '/audio/pioneer_success.mp3',\n  pioneer_warning: '/audio/pioneer_warning.mp3'\n};\nclass AudioManager {\n  constructor() {\n    this.audioElements = void 0;\n    this.enabled = void 0;\n    this.maxConcurrentPlays = 3;\n    this.playingCount = 0;\n    this.playQueue = [];\n    this.audioElements = new Map();\n    this.enabled = true;\n  }\n  async initialize() {\n    // Clean up existing audio elements first\n    this.dispose();\n    try {\n      // Initialize audio elements\n      for (const [key, path] of Object.entries(audioFiles)) {\n        const audio = new Audio(path);\n        audio.preload = 'auto';\n\n        // Add event listeners for proper cleanup\n        audio.addEventListener('ended', () => {\n          this.playingCount--;\n          this.processQueue();\n        });\n        audio.addEventListener('error', e => {\n          console.error(`Audio error for ${key}:`, e);\n          this.playingCount--;\n          this.processQueue();\n        });\n        this.audioElements.set(key, audio);\n      }\n    } catch (error) {\n      console.error('Failed to initialize audio:', error);\n      this.enabled = false;\n    }\n  }\n  async processQueue() {\n    if (this.playQueue.length === 0 || this.playingCount >= this.maxConcurrentPlays) {\n      return;\n    }\n    const next = this.playQueue.shift();\n    if (next) {\n      await this.playNotification(next.type, next.volume);\n    }\n  }\n  async playNotification(type, volume = 1) {\n    if (!this.enabled) return;\n    const audio = this.audioElements.get(type);\n    if (!audio) return;\n    if (this.playingCount >= this.maxConcurrentPlays) {\n      this.playQueue.push({\n        type,\n        volume\n      });\n      return;\n    }\n    try {\n      audio.volume = Math.min(Math.max(volume, 0), 1);\n      this.playingCount++;\n      await audio.play();\n    } catch (error) {\n      console.error('Failed to play notification sound:', error);\n      this.playingCount--;\n      this.processQueue();\n    }\n  }\n  dispose() {\n    this.playQueue = [];\n    this.playingCount = 0;\n    for (const audio of this.audioElements.values()) {\n      audio.pause();\n      audio.src = '';\n      audio.remove();\n    }\n    this.audioElements.clear();\n  }\n  toggleSound(enabled) {\n    this.enabled = enabled !== null && enabled !== void 0 ? enabled : !this.enabled;\n    if (!this.enabled) {\n      // Stop all playing sounds when disabled\n      for (const audio of this.audioElements.values()) {\n        audio.pause();\n        audio.currentTime = 0;\n      }\n      this.playQueue = [];\n      this.playingCount = 0;\n    }\n  }\n  playPioneerNotification(category, confidence) {\n    if (!this.enabled) return;\n\n    // Play different sounds based on pioneer category and confidence\n    if (confidence >= 0.9) {\n      this.playNotification('pioneer_success', 0.7);\n    } else if (confidence >= 0.7) {\n      this.playNotification('pioneer_discovery', 0.6);\n    } else if (confidence >= 0.5) {\n      this.playNotification('pioneer_strategy', 0.5);\n    } else {\n      this.playNotification('pioneer_warning', 0.4);\n    }\n  }\n}\nexport const audioManager = new AudioManager();","map":{"version":3,"names":["audioFiles","notification","alert","connect","disconnect","pioneer_discovery","pioneer_strategy","pioneer_success","pioneer_warning","AudioManager","constructor","audioElements","enabled","maxConcurrentPlays","playingCount","playQueue","Map","initialize","dispose","key","path","Object","entries","audio","Audio","preload","addEventListener","processQueue","e","console","error","set","length","next","shift","playNotification","type","volume","get","push","Math","min","max","play","values","pause","src","remove","clear","toggleSound","currentTime","playPioneerNotification","category","confidence","audioManager"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/utils/audioUtils.ts"],"sourcesContent":["// Map of audio files for different notification types\nconst audioFiles = {\n  notification: '/sounds/notification.mp3',\n  alert: '/sounds/alert.mp3',\n  connect: '/sounds/connect.mp3',\n  disconnect: '/sounds/disconnect.mp3',\n  pioneer_discovery: '/audio/pioneer_discovery.mp3',\n  pioneer_strategy: '/audio/pioneer_strategy.mp3',\n  pioneer_success: '/audio/pioneer_success.mp3',\n  pioneer_warning: '/audio/pioneer_warning.mp3'\n};\n\ntype NotificationSound = keyof typeof audioFiles;\n\nclass AudioManager {\n  private audioElements: Map<NotificationSound, HTMLAudioElement>;\n  private enabled: boolean;\n  private maxConcurrentPlays = 3;\n  private playingCount = 0;\n  private playQueue: Array<{ type: NotificationSound; volume: number }> = [];\n\n  constructor() {\n    this.audioElements = new Map();\n    this.enabled = true;\n  }\n\n  public async initialize() {\n    // Clean up existing audio elements first\n    this.dispose();\n\n    try {\n      // Initialize audio elements\n      for (const [key, path] of Object.entries(audioFiles)) {\n        const audio = new Audio(path);\n        audio.preload = 'auto';\n        \n        // Add event listeners for proper cleanup\n        audio.addEventListener('ended', () => {\n          this.playingCount--;\n          this.processQueue();\n        });\n        \n        audio.addEventListener('error', (e) => {\n          console.error(`Audio error for ${key}:`, e);\n          this.playingCount--;\n          this.processQueue();\n        });\n        \n        this.audioElements.set(key as NotificationSound, audio);\n      }\n    } catch (error) {\n      console.error('Failed to initialize audio:', error);\n      this.enabled = false;\n    }\n  }\n\n  private async processQueue() {\n    if (this.playQueue.length === 0 || this.playingCount >= this.maxConcurrentPlays) {\n      return;\n    }\n\n    const next = this.playQueue.shift();\n    if (next) {\n      await this.playNotification(next.type, next.volume);\n    }\n  }\n\n  public async playNotification(type: NotificationSound, volume: number = 1) {\n    if (!this.enabled) return;\n\n    const audio = this.audioElements.get(type);\n    if (!audio) return;\n\n    if (this.playingCount >= this.maxConcurrentPlays) {\n      this.playQueue.push({ type, volume });\n      return;\n    }\n\n    try {\n      audio.volume = Math.min(Math.max(volume, 0), 1);\n      this.playingCount++;\n      await audio.play();\n    } catch (error) {\n      console.error('Failed to play notification sound:', error);\n      this.playingCount--;\n      this.processQueue();\n    }\n  }\n\n  public dispose() {\n    this.playQueue = [];\n    this.playingCount = 0;\n    \n    for (const audio of this.audioElements.values()) {\n      audio.pause();\n      audio.src = '';\n      audio.remove();\n    }\n    \n    this.audioElements.clear();\n  }\n\n  public toggleSound(enabled?: boolean) {\n    this.enabled = enabled ?? !this.enabled;\n    \n    if (!this.enabled) {\n      // Stop all playing sounds when disabled\n      for (const audio of this.audioElements.values()) {\n        audio.pause();\n        audio.currentTime = 0;\n      }\n      this.playQueue = [];\n      this.playingCount = 0;\n    }\n  }\n\n  public playPioneerNotification(category: string, confidence: number) {\n    if (!this.enabled) return;\n\n    // Play different sounds based on pioneer category and confidence\n    if (confidence >= 0.9) {\n      this.playNotification('pioneer_success', 0.7);\n    } else if (confidence >= 0.7) {\n      this.playNotification('pioneer_discovery', 0.6);\n    } else if (confidence >= 0.5) {\n      this.playNotification('pioneer_strategy', 0.5);\n    } else {\n      this.playNotification('pioneer_warning', 0.4);\n    }\n  }\n}\n\nexport const audioManager = new AudioManager();"],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAG;EACjBC,YAAY,EAAE,0BAA0B;EACxCC,KAAK,EAAE,mBAAmB;EAC1BC,OAAO,EAAE,qBAAqB;EAC9BC,UAAU,EAAE,wBAAwB;EACpCC,iBAAiB,EAAE,8BAA8B;EACjDC,gBAAgB,EAAE,6BAA6B;EAC/CC,eAAe,EAAE,4BAA4B;EAC7CC,eAAe,EAAE;AACnB,CAAC;AAID,MAAMC,YAAY,CAAC;EAOjBC,WAAWA,CAAA,EAAG;IAAA,KANNC,aAAa;IAAA,KACbC,OAAO;IAAA,KACPC,kBAAkB,GAAG,CAAC;IAAA,KACtBC,YAAY,GAAG,CAAC;IAAA,KAChBC,SAAS,GAAuD,EAAE;IAGxE,IAAI,CAACJ,aAAa,GAAG,IAAIK,GAAG,CAAC,CAAC;IAC9B,IAAI,CAACJ,OAAO,GAAG,IAAI;EACrB;EAEA,MAAaK,UAAUA,CAAA,EAAG;IACxB;IACA,IAAI,CAACC,OAAO,CAAC,CAAC;IAEd,IAAI;MACF;MACA,KAAK,MAAM,CAACC,GAAG,EAAEC,IAAI,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACtB,UAAU,CAAC,EAAE;QACpD,MAAMuB,KAAK,GAAG,IAAIC,KAAK,CAACJ,IAAI,CAAC;QAC7BG,KAAK,CAACE,OAAO,GAAG,MAAM;;QAEtB;QACAF,KAAK,CAACG,gBAAgB,CAAC,OAAO,EAAE,MAAM;UACpC,IAAI,CAACZ,YAAY,EAAE;UACnB,IAAI,CAACa,YAAY,CAAC,CAAC;QACrB,CAAC,CAAC;QAEFJ,KAAK,CAACG,gBAAgB,CAAC,OAAO,EAAGE,CAAC,IAAK;UACrCC,OAAO,CAACC,KAAK,CAAC,mBAAmBX,GAAG,GAAG,EAAES,CAAC,CAAC;UAC3C,IAAI,CAACd,YAAY,EAAE;UACnB,IAAI,CAACa,YAAY,CAAC,CAAC;QACrB,CAAC,CAAC;QAEF,IAAI,CAAChB,aAAa,CAACoB,GAAG,CAACZ,GAAG,EAAuBI,KAAK,CAAC;MACzD;IACF,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,IAAI,CAAClB,OAAO,GAAG,KAAK;IACtB;EACF;EAEA,MAAce,YAAYA,CAAA,EAAG;IAC3B,IAAI,IAAI,CAACZ,SAAS,CAACiB,MAAM,KAAK,CAAC,IAAI,IAAI,CAAClB,YAAY,IAAI,IAAI,CAACD,kBAAkB,EAAE;MAC/E;IACF;IAEA,MAAMoB,IAAI,GAAG,IAAI,CAAClB,SAAS,CAACmB,KAAK,CAAC,CAAC;IACnC,IAAID,IAAI,EAAE;MACR,MAAM,IAAI,CAACE,gBAAgB,CAACF,IAAI,CAACG,IAAI,EAAEH,IAAI,CAACI,MAAM,CAAC;IACrD;EACF;EAEA,MAAaF,gBAAgBA,CAACC,IAAuB,EAAEC,MAAc,GAAG,CAAC,EAAE;IACzE,IAAI,CAAC,IAAI,CAACzB,OAAO,EAAE;IAEnB,MAAMW,KAAK,GAAG,IAAI,CAACZ,aAAa,CAAC2B,GAAG,CAACF,IAAI,CAAC;IAC1C,IAAI,CAACb,KAAK,EAAE;IAEZ,IAAI,IAAI,CAACT,YAAY,IAAI,IAAI,CAACD,kBAAkB,EAAE;MAChD,IAAI,CAACE,SAAS,CAACwB,IAAI,CAAC;QAAEH,IAAI;QAAEC;MAAO,CAAC,CAAC;MACrC;IACF;IAEA,IAAI;MACFd,KAAK,CAACc,MAAM,GAAGG,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACL,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MAC/C,IAAI,CAACvB,YAAY,EAAE;MACnB,MAAMS,KAAK,CAACoB,IAAI,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,IAAI,CAAChB,YAAY,EAAE;MACnB,IAAI,CAACa,YAAY,CAAC,CAAC;IACrB;EACF;EAEOT,OAAOA,CAAA,EAAG;IACf,IAAI,CAACH,SAAS,GAAG,EAAE;IACnB,IAAI,CAACD,YAAY,GAAG,CAAC;IAErB,KAAK,MAAMS,KAAK,IAAI,IAAI,CAACZ,aAAa,CAACiC,MAAM,CAAC,CAAC,EAAE;MAC/CrB,KAAK,CAACsB,KAAK,CAAC,CAAC;MACbtB,KAAK,CAACuB,GAAG,GAAG,EAAE;MACdvB,KAAK,CAACwB,MAAM,CAAC,CAAC;IAChB;IAEA,IAAI,CAACpC,aAAa,CAACqC,KAAK,CAAC,CAAC;EAC5B;EAEOC,WAAWA,CAACrC,OAAiB,EAAE;IACpC,IAAI,CAACA,OAAO,GAAGA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,CAAC,IAAI,CAACA,OAAO;IAEvC,IAAI,CAAC,IAAI,CAACA,OAAO,EAAE;MACjB;MACA,KAAK,MAAMW,KAAK,IAAI,IAAI,CAACZ,aAAa,CAACiC,MAAM,CAAC,CAAC,EAAE;QAC/CrB,KAAK,CAACsB,KAAK,CAAC,CAAC;QACbtB,KAAK,CAAC2B,WAAW,GAAG,CAAC;MACvB;MACA,IAAI,CAACnC,SAAS,GAAG,EAAE;MACnB,IAAI,CAACD,YAAY,GAAG,CAAC;IACvB;EACF;EAEOqC,uBAAuBA,CAACC,QAAgB,EAAEC,UAAkB,EAAE;IACnE,IAAI,CAAC,IAAI,CAACzC,OAAO,EAAE;;IAEnB;IACA,IAAIyC,UAAU,IAAI,GAAG,EAAE;MACrB,IAAI,CAAClB,gBAAgB,CAAC,iBAAiB,EAAE,GAAG,CAAC;IAC/C,CAAC,MAAM,IAAIkB,UAAU,IAAI,GAAG,EAAE;MAC5B,IAAI,CAAClB,gBAAgB,CAAC,mBAAmB,EAAE,GAAG,CAAC;IACjD,CAAC,MAAM,IAAIkB,UAAU,IAAI,GAAG,EAAE;MAC5B,IAAI,CAAClB,gBAAgB,CAAC,kBAAkB,EAAE,GAAG,CAAC;IAChD,CAAC,MAAM;MACL,IAAI,CAACA,gBAAgB,CAAC,iBAAiB,EAAE,GAAG,CAAC;IAC/C;EACF;AACF;AAEA,OAAO,MAAMmB,YAAY,GAAG,IAAI7C,YAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}