{"ast":null,"code":"export const KEYBOARD_SHORTCUTS = [\n// Global Shortcuts\n{\n  key: '?',\n  description: 'Show keyboard shortcuts',\n  category: 'Global',\n  action: () => {\n    window.dispatchEvent(new Event('toggle-shortcuts-help'));\n  }\n}, {\n  key: 'Escape',\n  description: 'Close current dialog/modal',\n  category: 'Global',\n  action: () => {\n    window.dispatchEvent(new Event('close-current-dialog'));\n  }\n}, {\n  key: 'n',\n  description: 'Toggle notification center',\n  category: 'Global',\n  action: () => {\n    window.dispatchEvent(new Event('toggle-notifications'));\n  }\n}, {\n  key: 's',\n  description: 'Open settings',\n  category: 'Global',\n  action: () => {\n    window.dispatchEvent(new Event('open-settings'));\n  }\n}, {\n  key: 'm',\n  description: 'Toggle sound notifications',\n  category: 'Global',\n  action: () => {\n    window.dispatchEvent(new Event('toggle-sound'));\n  }\n},\n// Pioneer Monitor Shortcuts\n{\n  key: 'p',\n  description: 'Open Pioneer Monitor',\n  category: 'Navigation',\n  ctrlKey: true\n}, {\n  key: '1',\n  description: 'Switch to Overview Tab',\n  category: 'Pioneer Monitor',\n  altKey: true\n}, {\n  key: '2',\n  description: 'Switch to Pioneers Tab',\n  category: 'Pioneer Monitor',\n  altKey: true\n}, {\n  key: '3',\n  description: 'Switch to Signals Tab',\n  category: 'Pioneer Monitor',\n  altKey: true\n}, {\n  key: 'f',\n  description: 'Toggle Filters Panel',\n  category: 'Pioneer Monitor',\n  altKey: true\n}, {\n  key: 's',\n  description: 'Toggle Settings Panel',\n  category: 'Pioneer Monitor',\n  altKey: true\n}, {\n  key: 'r',\n  description: 'Refresh Pioneer Data',\n  category: 'Pioneer Monitor',\n  altKey: true\n}];\nclass KeyboardShortcutsManager {\n  constructor() {\n    this.enabled = false;\n    this.registeredShortcuts = new Map();\n    this.handleKeyPress = event => {\n      // Check registered shortcuts first\n      for (const shortcut of Array.from(this.registeredShortcuts.values())) {\n        if (shortcut.key.toLowerCase() === event.key.toLowerCase() && !!shortcut.ctrlKey === event.ctrlKey && !!shortcut.altKey === event.altKey && !!shortcut.shiftKey === event.shiftKey) {\n          var _shortcut$action;\n          event.preventDefault();\n          (_shortcut$action = shortcut.action) === null || _shortcut$action === void 0 ? void 0 : _shortcut$action.call(shortcut);\n          return;\n        }\n      }\n\n      // Then check predefined shortcuts\n      const shortcut = KEYBOARD_SHORTCUTS.find(s => s.key.toLowerCase() === event.key.toLowerCase() && !!s.ctrlKey === event.ctrlKey && !!s.altKey === event.altKey && !!s.shiftKey === event.shiftKey);\n      if (shortcut !== null && shortcut !== void 0 && shortcut.action) {\n        event.preventDefault();\n        shortcut.action();\n      }\n    };\n  }\n  enable() {\n    if (this.enabled) return;\n    this.enabled = true;\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n  cleanup() {\n    this.enabled = false;\n    document.removeEventListener('keydown', this.handleKeyPress);\n    this.registeredShortcuts.clear();\n  }\n  getShortcuts() {\n    return [...KEYBOARD_SHORTCUTS, ...Array.from(this.registeredShortcuts.values())];\n  }\n  register(shortcutKey, action, description) {\n    const [key, ...modifiers] = shortcutKey.toLowerCase().split('+').reverse();\n    const shortcut = {\n      key,\n      description,\n      category: 'Dynamic',\n      action,\n      ctrlKey: modifiers.includes('ctrl'),\n      altKey: modifiers.includes('alt'),\n      shiftKey: modifiers.includes('shift')\n    };\n    this.registeredShortcuts.set(shortcutKey, shortcut);\n  }\n  unregister(shortcutKey) {\n    this.registeredShortcuts.delete(shortcutKey);\n  }\n}\nexport const keyboardShortcuts = new KeyboardShortcutsManager();","map":{"version":3,"names":["KEYBOARD_SHORTCUTS","key","description","category","action","window","dispatchEvent","Event","ctrlKey","altKey","KeyboardShortcutsManager","constructor","enabled","registeredShortcuts","Map","handleKeyPress","event","shortcut","Array","from","values","toLowerCase","shiftKey","_shortcut$action","preventDefault","call","find","s","enable","document","addEventListener","cleanup","removeEventListener","clear","getShortcuts","register","shortcutKey","modifiers","split","reverse","includes","set","unregister","delete","keyboardShortcuts"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/utils/keyboardShortcuts.ts"],"sourcesContent":["import { KeyboardShortcut } from '../types';\n\nexport const KEYBOARD_SHORTCUTS: KeyboardShortcut[] = [\n    // Global Shortcuts\n    {\n        key: '?',\n        description: 'Show keyboard shortcuts',\n        category: 'Global',\n        action: () => {\n            window.dispatchEvent(new Event('toggle-shortcuts-help'));\n        },\n    },\n    {\n        key: 'Escape',\n        description: 'Close current dialog/modal',\n        category: 'Global',\n        action: () => {\n            window.dispatchEvent(new Event('close-current-dialog'));\n        },\n    },\n    {\n        key: 'n',\n        description: 'Toggle notification center',\n        category: 'Global',\n        action: () => {\n            window.dispatchEvent(new Event('toggle-notifications'));\n        },\n    },\n    {\n        key: 's',\n        description: 'Open settings',\n        category: 'Global',\n        action: () => {\n            window.dispatchEvent(new Event('open-settings'));\n        },\n    },\n    {\n        key: 'm',\n        description: 'Toggle sound notifications',\n        category: 'Global',\n        action: () => {\n            window.dispatchEvent(new Event('toggle-sound'));\n        },\n    },\n\n    // Pioneer Monitor Shortcuts\n    {\n        key: 'p',\n        description: 'Open Pioneer Monitor',\n        category: 'Navigation',\n        ctrlKey: true\n    },\n    {\n        key: '1',\n        description: 'Switch to Overview Tab',\n        category: 'Pioneer Monitor',\n        altKey: true\n    },\n    {\n        key: '2',\n        description: 'Switch to Pioneers Tab',\n        category: 'Pioneer Monitor',\n        altKey: true\n    },\n    {\n        key: '3',\n        description: 'Switch to Signals Tab',\n        category: 'Pioneer Monitor',\n        altKey: true\n    },\n    {\n        key: 'f',\n        description: 'Toggle Filters Panel',\n        category: 'Pioneer Monitor',\n        altKey: true\n    },\n    {\n        key: 's',\n        description: 'Toggle Settings Panel',\n        category: 'Pioneer Monitor',\n        altKey: true\n    },\n    {\n        key: 'r',\n        description: 'Refresh Pioneer Data',\n        category: 'Pioneer Monitor',\n        altKey: true\n    }\n];\n\nclass KeyboardShortcutsManager {\n    private enabled = false;\n    private registeredShortcuts = new Map<string, KeyboardShortcut>();\n\n    enable() {\n        if (this.enabled) return;\n        this.enabled = true;\n        document.addEventListener('keydown', this.handleKeyPress);\n    }\n\n    cleanup() {\n        this.enabled = false;\n        document.removeEventListener('keydown', this.handleKeyPress);\n        this.registeredShortcuts.clear();\n    }\n\n    getShortcuts() {\n        return [...KEYBOARD_SHORTCUTS, ...Array.from(this.registeredShortcuts.values())];\n    }\n\n    register(shortcutKey: string, action: () => void, description: string) {\n        const [key, ...modifiers] = shortcutKey.toLowerCase().split('+').reverse();\n        const shortcut: KeyboardShortcut = {\n            key,\n            description,\n            category: 'Dynamic',\n            action,\n            ctrlKey: modifiers.includes('ctrl'),\n            altKey: modifiers.includes('alt'),\n            shiftKey: modifiers.includes('shift')\n        };\n        this.registeredShortcuts.set(shortcutKey, shortcut);\n    }\n\n    unregister(shortcutKey: string) {\n        this.registeredShortcuts.delete(shortcutKey);\n    }\n\n    private handleKeyPress = (event: KeyboardEvent) => {\n        // Check registered shortcuts first\n        for (const shortcut of Array.from(this.registeredShortcuts.values())) {\n            if (\n                shortcut.key.toLowerCase() === event.key.toLowerCase() &&\n                !!shortcut.ctrlKey === event.ctrlKey &&\n                !!shortcut.altKey === event.altKey &&\n                !!shortcut.shiftKey === event.shiftKey\n            ) {\n                event.preventDefault();\n                shortcut.action?.();\n                return;\n            }\n        }\n\n        // Then check predefined shortcuts\n        const shortcut = KEYBOARD_SHORTCUTS.find(s =>\n            s.key.toLowerCase() === event.key.toLowerCase() &&\n            !!s.ctrlKey === event.ctrlKey &&\n            !!s.altKey === event.altKey &&\n            !!s.shiftKey === event.shiftKey\n        );\n\n        if (shortcut?.action) {\n            event.preventDefault();\n            shortcut.action();\n        }\n    };\n}\n\nexport const keyboardShortcuts = new KeyboardShortcutsManager();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}