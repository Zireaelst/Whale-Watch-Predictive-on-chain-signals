{"ast":null,"code":"const STORAGE_KEYS={GENERAL_SETTINGS:'whalewatch_settings',NOTIFICATION_SETTINGS:'whalewatch_notifications',PIONEER_SETTINGS:'whalewatch_pioneer_settings',PIONEER_FILTERS:'whalewatch_pioneer_filters'};class SettingsService{constructor(){this.STORAGE_KEY='defi-pioneer-watch-settings';this.settings=void 0;const savedSettings=localStorage.getItem(this.STORAGE_KEY);this.settings=savedSettings?{...DEFAULT_SETTINGS,...JSON.parse(savedSettings)}:DEFAULT_SETTINGS;}getSettings(){return{...this.settings};}updateSettings(newSettings){this.settings={...this.settings,...newSettings};this.saveSettings();}updateNotificationSettings(settings){this.settings.notifications={...this.settings.notifications,...settings};this.saveSettings();}updateFilterSettings(settings){this.settings.filters={...this.settings.filters,...settings};this.saveSettings();}setTheme(theme){this.settings.theme=theme;this.saveSettings();}shouldNotify(priority){return this.settings.notifications.enabled&&priority>=this.settings.notifications.minPriority;}saveSettings(){localStorage.setItem(this.STORAGE_KEY,JSON.stringify(this.settings));}// Pioneer Settings\ngetPioneerSettings(){const defaultSettings={minTransactions:50,minSuccessRate:0.65,updateInterval:300,notificationSettings:{protocolSignals:true,strategySignals:true,trendSignals:true},lastUpdateTimestamp:Date.now()};try{const stored=localStorage.getItem(STORAGE_KEYS.PIONEER_SETTINGS);if(!stored)return defaultSettings;const parsed=JSON.parse(stored);return{...defaultSettings,...parsed,notificationSettings:{...defaultSettings.notificationSettings,...parsed.notificationSettings}};}catch(error){console.error('Failed to load pioneer settings:',error);return defaultSettings;}}savePioneerSettings(settings){try{const current=this.getPioneerSettings();const updated={...current,...settings,notificationSettings:{...current.notificationSettings,...(settings.notificationSettings||{})},lastUpdateTimestamp:Date.now()};localStorage.setItem(STORAGE_KEYS.PIONEER_SETTINGS,JSON.stringify(updated));// Dispatch event for real-time updates\nwindow.dispatchEvent(new CustomEvent('pioneerSettingsChanged',{detail:updated}));}catch(error){console.error('Failed to save pioneer settings:',error);throw error;}}getPioneerFilters(){const defaultFilters={categories:[],minSuccessRate:0.65,chains:[],protocols:[]};try{const stored=localStorage.getItem(STORAGE_KEYS.PIONEER_FILTERS);if(!stored)return defaultFilters;return{...defaultFilters,...JSON.parse(stored)};}catch(error){console.error('Failed to load pioneer filters:',error);return defaultFilters;}}savePioneerFilters(filters){try{const current=this.getPioneerFilters();const updated={...current,...filters};localStorage.setItem(STORAGE_KEYS.PIONEER_FILTERS,JSON.stringify(updated));// Dispatch event for real-time updates\nwindow.dispatchEvent(new CustomEvent('pioneerFiltersChanged',{detail:updated}));}catch(error){console.error('Failed to save pioneer filters:',error);throw error;}}clearPioneerData(){try{localStorage.removeItem(STORAGE_KEYS.PIONEER_SETTINGS);localStorage.removeItem(STORAGE_KEYS.PIONEER_FILTERS);// Dispatch events to notify of cleared data\nwindow.dispatchEvent(new Event('pioneerSettingsChanged'));window.dispatchEvent(new Event('pioneerFiltersChanged'));}catch(error){console.error('Failed to clear pioneer data:',error);throw error;}}}export default new SettingsService();","map":{"version":3,"names":["STORAGE_KEYS","GENERAL_SETTINGS","NOTIFICATION_SETTINGS","PIONEER_SETTINGS","PIONEER_FILTERS","SettingsService","constructor","STORAGE_KEY","settings","savedSettings","localStorage","getItem","DEFAULT_SETTINGS","JSON","parse","getSettings","updateSettings","newSettings","saveSettings","updateNotificationSettings","notifications","updateFilterSettings","filters","setTheme","theme","shouldNotify","priority","enabled","minPriority","setItem","stringify","getPioneerSettings","defaultSettings","minTransactions","minSuccessRate","updateInterval","notificationSettings","protocolSignals","strategySignals","trendSignals","lastUpdateTimestamp","Date","now","stored","parsed","error","console","savePioneerSettings","current","updated","window","dispatchEvent","CustomEvent","detail","getPioneerFilters","defaultFilters","categories","chains","protocols","savePioneerFilters","clearPioneerData","removeItem","Event"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/services/SettingsService.ts"],"sourcesContent":["import { PioneerSettings } from '../types';\n\nconst STORAGE_KEYS = {\n  GENERAL_SETTINGS: 'whalewatch_settings',\n  NOTIFICATION_SETTINGS: 'whalewatch_notifications',\n  PIONEER_SETTINGS: 'whalewatch_pioneer_settings',\n  PIONEER_FILTERS: 'whalewatch_pioneer_filters'\n};\n\ninterface StoredPioneerSettings extends PioneerSettings {\n  lastUpdateTimestamp: number;\n}\n\nclass SettingsService {\n  private readonly STORAGE_KEY = 'defi-pioneer-watch-settings';\n  private settings: UserSettings;\n\n  constructor() {\n    const savedSettings = localStorage.getItem(this.STORAGE_KEY);\n    this.settings = savedSettings\n      ? { ...DEFAULT_SETTINGS, ...JSON.parse(savedSettings) }\n      : DEFAULT_SETTINGS;\n  }\n\n  getSettings(): UserSettings {\n    return { ...this.settings };\n  }\n\n  updateSettings(newSettings: Partial<UserSettings>) {\n    this.settings = {\n      ...this.settings,\n      ...newSettings,\n    };\n    this.saveSettings();\n  }\n\n  updateNotificationSettings(settings: Partial<NotificationSettings>) {\n    this.settings.notifications = {\n      ...this.settings.notifications,\n      ...settings,\n    };\n    this.saveSettings();\n  }\n\n  updateFilterSettings(settings: Partial<FilterSettings>) {\n    this.settings.filters = {\n      ...this.settings.filters,\n      ...settings,\n    };\n    this.saveSettings();\n  }\n\n  setTheme(theme: 'light' | 'dark') {\n    this.settings.theme = theme;\n    this.saveSettings();\n  }\n\n  shouldNotify(priority: number): boolean {\n    return (\n      this.settings.notifications.enabled &&\n      priority >= this.settings.notifications.minPriority\n    );\n  }\n\n  private saveSettings() {\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.settings));\n  }\n\n  // Pioneer Settings\n  public getPioneerSettings(): StoredPioneerSettings {\n    const defaultSettings: StoredPioneerSettings = {\n      minTransactions: 50,\n      minSuccessRate: 0.65,\n      updateInterval: 300,\n      notificationSettings: {\n        protocolSignals: true,\n        strategySignals: true,\n        trendSignals: true\n      },\n      lastUpdateTimestamp: Date.now()\n    };\n\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.PIONEER_SETTINGS);\n      if (!stored) return defaultSettings;\n\n      const parsed = JSON.parse(stored);\n      return {\n        ...defaultSettings,\n        ...parsed,\n        notificationSettings: {\n          ...defaultSettings.notificationSettings,\n          ...parsed.notificationSettings\n        }\n      };\n    } catch (error) {\n      console.error('Failed to load pioneer settings:', error);\n      return defaultSettings;\n    }\n  }\n\n  public savePioneerSettings(settings: Partial<PioneerSettings>): void {\n    try {\n      const current = this.getPioneerSettings();\n      const updated: StoredPioneerSettings = {\n        ...current,\n        ...settings,\n        notificationSettings: {\n          ...current.notificationSettings,\n          ...(settings.notificationSettings || {})\n        },\n        lastUpdateTimestamp: Date.now()\n      };\n\n      localStorage.setItem(\n        STORAGE_KEYS.PIONEER_SETTINGS,\n        JSON.stringify(updated)\n      );\n\n      // Dispatch event for real-time updates\n      window.dispatchEvent(\n        new CustomEvent('pioneerSettingsChanged', { detail: updated })\n      );\n    } catch (error) {\n      console.error('Failed to save pioneer settings:', error);\n      throw error;\n    }\n  }\n\n  public getPioneerFilters() {\n    const defaultFilters = {\n      categories: [],\n      minSuccessRate: 0.65,\n      chains: [],\n      protocols: []\n    };\n\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.PIONEER_FILTERS);\n      if (!stored) return defaultFilters;\n\n      return {\n        ...defaultFilters,\n        ...JSON.parse(stored)\n      };\n    } catch (error) {\n      console.error('Failed to load pioneer filters:', error);\n      return defaultFilters;\n    }\n  }\n\n  public savePioneerFilters(filters: {\n    categories?: string[];\n    minSuccessRate?: number;\n    chains?: string[];\n    protocols?: string[];\n  }): void {\n    try {\n      const current = this.getPioneerFilters();\n      const updated = {\n        ...current,\n        ...filters\n      };\n\n      localStorage.setItem(\n        STORAGE_KEYS.PIONEER_FILTERS,\n        JSON.stringify(updated)\n      );\n\n      // Dispatch event for real-time updates\n      window.dispatchEvent(\n        new CustomEvent('pioneerFiltersChanged', { detail: updated })\n      );\n    } catch (error) {\n      console.error('Failed to save pioneer filters:', error);\n      throw error;\n    }\n  }\n\n  public clearPioneerData(): void {\n    try {\n      localStorage.removeItem(STORAGE_KEYS.PIONEER_SETTINGS);\n      localStorage.removeItem(STORAGE_KEYS.PIONEER_FILTERS);\n\n      // Dispatch events to notify of cleared data\n      window.dispatchEvent(new Event('pioneerSettingsChanged'));\n      window.dispatchEvent(new Event('pioneerFiltersChanged'));\n    } catch (error) {\n      console.error('Failed to clear pioneer data:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new SettingsService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}