{"ast":null,"code":"const DEFAULT_SETTINGS = {\n  notifications: {\n    enabled: true,\n    minPriority: 1,\n    soundEnabled: true,\n    desktopNotifications: true\n  },\n  filters: {\n    categories: [],\n    minSuccessRate: 0.65,\n    chains: [],\n    protocols: []\n  },\n  appearance: {\n    theme: 'light'\n  }\n};\nconst STORAGE_KEYS = {\n  GENERAL_SETTINGS: 'whalewatch_settings',\n  NOTIFICATION_SETTINGS: 'whalewatch_notifications',\n  PIONEER_SETTINGS: 'whalewatch_pioneer_settings',\n  PIONEER_FILTERS: 'whalewatch_pioneer_filters'\n};\nclass SettingsService {\n  constructor() {\n    this.STORAGE_KEY = 'defi-pioneer-watch-settings';\n    this.settings = void 0;\n    const savedSettings = localStorage.getItem(this.STORAGE_KEY);\n    this.settings = savedSettings ? {\n      ...DEFAULT_SETTINGS,\n      ...JSON.parse(savedSettings)\n    } : DEFAULT_SETTINGS;\n  }\n  getSettings() {\n    return {\n      ...this.settings\n    };\n  }\n  updateSettings(newSettings) {\n    this.settings = {\n      ...this.settings,\n      ...newSettings\n    };\n    this.saveSettings();\n  }\n  updateNotificationSettings(settings) {\n    this.settings.notifications = {\n      ...this.settings.notifications,\n      ...settings\n    };\n    this.saveSettings();\n  }\n  updateFilterSettings(settings) {\n    this.settings.filters = {\n      ...this.settings.filters,\n      ...settings\n    };\n    this.saveSettings();\n  }\n  setTheme(theme) {\n    this.settings.appearance = {\n      ...this.settings.appearance,\n      theme\n    };\n    this.saveSettings();\n  }\n  shouldNotify(priority) {\n    return this.settings.notifications.enabled && priority >= this.settings.notifications.minPriority;\n  }\n  saveSettings() {\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.settings));\n  }\n\n  // Pioneer Settings\n  getPioneerSettings() {\n    const defaultSettings = {\n      minTransactions: 50,\n      minSuccessRate: 0.65,\n      updateInterval: 300,\n      notificationSettings: {\n        protocolSignals: true,\n        strategySignals: true,\n        trendSignals: true\n      },\n      lastUpdateTimestamp: Date.now()\n    };\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.PIONEER_SETTINGS);\n      if (!stored) return defaultSettings;\n      const parsed = JSON.parse(stored);\n      return {\n        ...defaultSettings,\n        ...parsed,\n        notificationSettings: {\n          ...defaultSettings.notificationSettings,\n          ...parsed.notificationSettings\n        }\n      };\n    } catch (error) {\n      console.error('Failed to load pioneer settings:', error);\n      return defaultSettings;\n    }\n  }\n  savePioneerSettings(settings) {\n    try {\n      const current = this.getPioneerSettings();\n      const updated = {\n        ...current,\n        ...settings,\n        notificationSettings: {\n          ...current.notificationSettings,\n          ...(settings.notificationSettings || {})\n        },\n        lastUpdateTimestamp: Date.now()\n      };\n      localStorage.setItem(STORAGE_KEYS.PIONEER_SETTINGS, JSON.stringify(updated));\n\n      // Dispatch event for real-time updates\n      window.dispatchEvent(new CustomEvent('pioneerSettingsChanged', {\n        detail: updated\n      }));\n    } catch (error) {\n      console.error('Failed to save pioneer settings:', error);\n      throw error;\n    }\n  }\n  getPioneerFilters() {\n    const defaultFilters = {\n      categories: [],\n      minSuccessRate: 0.65,\n      chains: [],\n      protocols: []\n    };\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.PIONEER_FILTERS);\n      if (!stored) return defaultFilters;\n      return {\n        ...defaultFilters,\n        ...JSON.parse(stored)\n      };\n    } catch (error) {\n      console.error('Failed to load pioneer filters:', error);\n      return defaultFilters;\n    }\n  }\n  savePioneerFilters(filters) {\n    try {\n      const current = this.getPioneerFilters();\n      const updated = {\n        ...current,\n        ...filters\n      };\n      localStorage.setItem(STORAGE_KEYS.PIONEER_FILTERS, JSON.stringify(updated));\n\n      // Dispatch event for real-time updates\n      window.dispatchEvent(new CustomEvent('pioneerFiltersChanged', {\n        detail: updated\n      }));\n    } catch (error) {\n      console.error('Failed to save pioneer filters:', error);\n      throw error;\n    }\n  }\n  clearPioneerData() {\n    try {\n      localStorage.removeItem(STORAGE_KEYS.PIONEER_SETTINGS);\n      localStorage.removeItem(STORAGE_KEYS.PIONEER_FILTERS);\n\n      // Dispatch events to notify of cleared data\n      window.dispatchEvent(new Event('pioneerSettingsChanged'));\n      window.dispatchEvent(new Event('pioneerFiltersChanged'));\n    } catch (error) {\n      console.error('Failed to clear pioneer data:', error);\n      throw error;\n    }\n  }\n}\nconst settingsService = new SettingsService();\nexport default settingsService;","map":{"version":3,"names":["DEFAULT_SETTINGS","notifications","enabled","minPriority","soundEnabled","desktopNotifications","filters","categories","minSuccessRate","chains","protocols","appearance","theme","STORAGE_KEYS","GENERAL_SETTINGS","NOTIFICATION_SETTINGS","PIONEER_SETTINGS","PIONEER_FILTERS","SettingsService","constructor","STORAGE_KEY","settings","savedSettings","localStorage","getItem","JSON","parse","getSettings","updateSettings","newSettings","saveSettings","updateNotificationSettings","updateFilterSettings","setTheme","shouldNotify","priority","setItem","stringify","getPioneerSettings","defaultSettings","minTransactions","updateInterval","notificationSettings","protocolSignals","strategySignals","trendSignals","lastUpdateTimestamp","Date","now","stored","parsed","error","console","savePioneerSettings","current","updated","window","dispatchEvent","CustomEvent","detail","getPioneerFilters","defaultFilters","savePioneerFilters","clearPioneerData","removeItem","Event","settingsService"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/services/SettingsService.ts"],"sourcesContent":["import { PioneerSettings } from '../types';\n\ninterface NotificationSettings {\n  enabled: boolean;\n  minPriority: number;\n  soundEnabled: boolean;\n  desktopNotifications: boolean;\n}\n\ninterface FilterSettings {\n  categories: string[];\n  minSuccessRate: number;\n  chains: string[];\n  protocols: string[];\n}\n\ninterface UserSettings {\n  notifications: NotificationSettings;\n  filters: FilterSettings;\n  appearance: {\n    theme: 'light' | 'dark';\n  };\n}\n\nconst DEFAULT_SETTINGS: UserSettings = {\n  notifications: {\n    enabled: true,\n    minPriority: 1,\n    soundEnabled: true,\n    desktopNotifications: true\n  },\n  filters: {\n    categories: [],\n    minSuccessRate: 0.65,\n    chains: [],\n    protocols: []\n  },\n  appearance: {\n    theme: 'light'\n  }\n};\n\nconst STORAGE_KEYS = {\n  GENERAL_SETTINGS: 'whalewatch_settings',\n  NOTIFICATION_SETTINGS: 'whalewatch_notifications',\n  PIONEER_SETTINGS: 'whalewatch_pioneer_settings',\n  PIONEER_FILTERS: 'whalewatch_pioneer_filters'\n};\n\ninterface StoredPioneerSettings extends PioneerSettings {\n  lastUpdateTimestamp: number;\n}\n\nclass SettingsService {\n  private readonly STORAGE_KEY = 'defi-pioneer-watch-settings';\n  private settings: UserSettings;\n\n  constructor() {\n    const savedSettings = localStorage.getItem(this.STORAGE_KEY);\n    this.settings = savedSettings\n      ? { ...DEFAULT_SETTINGS, ...JSON.parse(savedSettings) }\n      : DEFAULT_SETTINGS;\n  }\n\n  getSettings(): UserSettings {\n    return { ...this.settings };\n  }\n\n  updateSettings(newSettings: Partial<UserSettings>) {\n    this.settings = {\n      ...this.settings,\n      ...newSettings,\n    };\n    this.saveSettings();\n  }\n\n  updateNotificationSettings(settings: Partial<NotificationSettings>) {\n    this.settings.notifications = {\n      ...this.settings.notifications,\n      ...settings,\n    };\n    this.saveSettings();\n  }\n\n  updateFilterSettings(settings: Partial<FilterSettings>) {\n    this.settings.filters = {\n      ...this.settings.filters,\n      ...settings,\n    };\n    this.saveSettings();\n  }\n\n  setTheme(theme: 'light' | 'dark') {\n    this.settings.appearance = {\n      ...this.settings.appearance,\n      theme\n    };\n    this.saveSettings();\n  }\n\n  shouldNotify(priority: number): boolean {\n    return (\n      this.settings.notifications.enabled &&\n      priority >= this.settings.notifications.minPriority\n    );\n  }\n\n  private saveSettings() {\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.settings));\n  }\n\n  // Pioneer Settings\n  public getPioneerSettings(): StoredPioneerSettings {\n    const defaultSettings: StoredPioneerSettings = {\n      minTransactions: 50,\n      minSuccessRate: 0.65,\n      updateInterval: 300,\n      notificationSettings: {\n        protocolSignals: true,\n        strategySignals: true,\n        trendSignals: true\n      },\n      lastUpdateTimestamp: Date.now()\n    };\n\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.PIONEER_SETTINGS);\n      if (!stored) return defaultSettings;\n\n      const parsed = JSON.parse(stored);\n      return {\n        ...defaultSettings,\n        ...parsed,\n        notificationSettings: {\n          ...defaultSettings.notificationSettings,\n          ...parsed.notificationSettings\n        }\n      };\n    } catch (error) {\n      console.error('Failed to load pioneer settings:', error);\n      return defaultSettings;\n    }\n  }\n\n  public savePioneerSettings(settings: Partial<PioneerSettings>): void {\n    try {\n      const current = this.getPioneerSettings();\n      const updated: StoredPioneerSettings = {\n        ...current,\n        ...settings,\n        notificationSettings: {\n          ...current.notificationSettings,\n          ...(settings.notificationSettings || {})\n        },\n        lastUpdateTimestamp: Date.now()\n      };\n\n      localStorage.setItem(\n        STORAGE_KEYS.PIONEER_SETTINGS,\n        JSON.stringify(updated)\n      );\n\n      // Dispatch event for real-time updates\n      window.dispatchEvent(\n        new CustomEvent('pioneerSettingsChanged', { detail: updated })\n      );\n    } catch (error) {\n      console.error('Failed to save pioneer settings:', error);\n      throw error;\n    }\n  }\n\n  public getPioneerFilters() {\n    const defaultFilters = {\n      categories: [],\n      minSuccessRate: 0.65,\n      chains: [],\n      protocols: []\n    };\n\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.PIONEER_FILTERS);\n      if (!stored) return defaultFilters;\n\n      return {\n        ...defaultFilters,\n        ...JSON.parse(stored)\n      };\n    } catch (error) {\n      console.error('Failed to load pioneer filters:', error);\n      return defaultFilters;\n    }\n  }\n\n  public savePioneerFilters(filters: {\n    categories?: string[];\n    minSuccessRate?: number;\n    chains?: string[];\n    protocols?: string[];\n  }): void {\n    try {\n      const current = this.getPioneerFilters();\n      const updated = {\n        ...current,\n        ...filters\n      };\n\n      localStorage.setItem(\n        STORAGE_KEYS.PIONEER_FILTERS,\n        JSON.stringify(updated)\n      );\n\n      // Dispatch event for real-time updates\n      window.dispatchEvent(\n        new CustomEvent('pioneerFiltersChanged', { detail: updated })\n      );\n    } catch (error) {\n      console.error('Failed to save pioneer filters:', error);\n      throw error;\n    }\n  }\n\n  public clearPioneerData(): void {\n    try {\n      localStorage.removeItem(STORAGE_KEYS.PIONEER_SETTINGS);\n      localStorage.removeItem(STORAGE_KEYS.PIONEER_FILTERS);\n\n      // Dispatch events to notify of cleared data\n      window.dispatchEvent(new Event('pioneerSettingsChanged'));\n      window.dispatchEvent(new Event('pioneerFiltersChanged'));\n    } catch (error) {\n      console.error('Failed to clear pioneer data:', error);\n      throw error;\n    }\n  }\n}\n\nconst settingsService = new SettingsService();\nexport default settingsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}