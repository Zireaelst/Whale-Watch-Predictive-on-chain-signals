{"ast":null,"code":"import { notificationQueue } from './NotificationQueue';\nexport class ErrorHandler {\n  static handleError(error) {\n    let errorDetails;\n    if (error instanceof Error) {\n      errorDetails = this.parseError(error);\n    } else {\n      errorDetails = error;\n    }\n\n    // Log error for debugging\n    console.error('Error:', errorDetails);\n\n    // Get error message and priority\n    const message = this.ERROR_MESSAGES[errorDetails.code] || errorDetails.message;\n    const priority = this.ERROR_PRIORITIES[errorDetails.code] || 1;\n\n    // Add error notification\n    notificationQueue.add({\n      id: Date.now().toString(),\n      title: 'Error',\n      message,\n      type: 'error',\n      timestamp: Date.now(),\n      priority,\n      read: false\n    });\n    return errorDetails;\n  }\n  static parseError(error) {\n    // Parse known error patterns\n    if (error.message.includes('wallet not found')) {\n      return {\n        code: 'PIONEER_NOT_FOUND',\n        message: error.message\n      };\n    }\n    if (error.message.includes('invalid category')) {\n      return {\n        code: 'INVALID_PIONEER_CATEGORY',\n        message: error.message\n      };\n    }\n    if (error.message.includes('insufficient transactions')) {\n      return {\n        code: 'INSUFFICIENT_TRANSACTIONS',\n        message: error.message\n      };\n    }\n\n    // Network errors\n    if (error.message.includes('network') || error.message.includes('Network Error')) {\n      return {\n        code: 'NETWORK_ERROR',\n        message: error.message\n      };\n    }\n\n    // API errors\n    if (error.message.includes('API') || error.message.includes('status code')) {\n      return {\n        code: 'API_ERROR',\n        message: error.message\n      };\n    }\n\n    // Validation errors\n    if (error.message.includes('validation') || error.message.includes('invalid')) {\n      return {\n        code: 'VALIDATION_ERROR',\n        message: error.message\n      };\n    }\n\n    // Default unknown error\n    return {\n      code: 'UNKNOWN_ERROR',\n      message: error.message\n    };\n  }\n  static handlePioneerError(error, context) {\n    let errorDetails;\n\n    // Pioneer-specific error parsing\n    if (error.message.includes('metrics')) {\n      errorDetails = {\n        code: 'METRICS_UPDATE_FAILED',\n        message: error.message,\n        context\n      };\n    } else if (error.message.includes('protocol discovery')) {\n      errorDetails = {\n        code: 'PROTOCOL_DISCOVERY_FAILED',\n        message: error.message,\n        context\n      };\n    } else if (error.message.includes('strategy deployment')) {\n      errorDetails = {\n        code: 'STRATEGY_DEPLOYMENT_FAILED',\n        message: error.message,\n        context\n      };\n    } else if (error.message.includes('chain activity')) {\n      errorDetails = {\n        code: 'CHAIN_ACTIVITY_FAILED',\n        message: error.message,\n        context\n      };\n    } else {\n      errorDetails = this.parseError(error);\n    }\n    return this.handleError(errorDetails);\n  }\n  static isRecoverable(errorCode) {\n    const unrecoverableErrors = ['PIONEER_NOT_FOUND', 'INVALID_PIONEER_CATEGORY', 'INSUFFICIENT_TRANSACTIONS'];\n    return !unrecoverableErrors.includes(errorCode);\n  }\n}\nErrorHandler.ERROR_MESSAGES = {\n  // Pioneer-specific error codes\n  PIONEER_NOT_FOUND: 'Pioneer wallet not found',\n  INVALID_PIONEER_CATEGORY: 'Invalid pioneer category',\n  INSUFFICIENT_TRANSACTIONS: 'Insufficient transactions to qualify as pioneer',\n  METRICS_UPDATE_FAILED: 'Failed to update pioneer metrics',\n  PROTOCOL_DISCOVERY_FAILED: 'Failed to record protocol discovery',\n  STRATEGY_DEPLOYMENT_FAILED: 'Failed to record strategy deployment',\n  CHAIN_ACTIVITY_FAILED: 'Failed to update chain activity',\n  // Generic error codes\n  NETWORK_ERROR: 'Network connection error',\n  API_ERROR: 'API request failed',\n  VALIDATION_ERROR: 'Invalid input data',\n  UNKNOWN_ERROR: 'An unknown error occurred'\n};\nErrorHandler.ERROR_PRIORITIES = {\n  PIONEER_NOT_FOUND: 2,\n  INVALID_PIONEER_CATEGORY: 2,\n  INSUFFICIENT_TRANSACTIONS: 1,\n  METRICS_UPDATE_FAILED: 3,\n  PROTOCOL_DISCOVERY_FAILED: 3,\n  STRATEGY_DEPLOYMENT_FAILED: 3,\n  CHAIN_ACTIVITY_FAILED: 2,\n  NETWORK_ERROR: 3,\n  API_ERROR: 3,\n  VALIDATION_ERROR: 2,\n  UNKNOWN_ERROR: 1\n};","map":{"version":3,"names":["notificationQueue","ErrorHandler","handleError","error","errorDetails","Error","parseError","console","message","ERROR_MESSAGES","code","priority","ERROR_PRIORITIES","add","id","Date","now","toString","title","type","timestamp","read","includes","handlePioneerError","context","isRecoverable","errorCode","unrecoverableErrors","PIONEER_NOT_FOUND","INVALID_PIONEER_CATEGORY","INSUFFICIENT_TRANSACTIONS","METRICS_UPDATE_FAILED","PROTOCOL_DISCOVERY_FAILED","STRATEGY_DEPLOYMENT_FAILED","CHAIN_ACTIVITY_FAILED","NETWORK_ERROR","API_ERROR","VALIDATION_ERROR","UNKNOWN_ERROR"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/utils/errorHandler.ts"],"sourcesContent":["import { notificationQueue } from './NotificationQueue';\n\ninterface ErrorDetails {\n  code: string;\n  message: string;\n  context?: Record<string, any>;\n}\n\nexport class ErrorHandler {\n  private static readonly ERROR_MESSAGES = {\n    // Pioneer-specific error codes\n    PIONEER_NOT_FOUND: 'Pioneer wallet not found',\n    INVALID_PIONEER_CATEGORY: 'Invalid pioneer category',\n    INSUFFICIENT_TRANSACTIONS: 'Insufficient transactions to qualify as pioneer',\n    METRICS_UPDATE_FAILED: 'Failed to update pioneer metrics',\n    PROTOCOL_DISCOVERY_FAILED: 'Failed to record protocol discovery',\n    STRATEGY_DEPLOYMENT_FAILED: 'Failed to record strategy deployment',\n    CHAIN_ACTIVITY_FAILED: 'Failed to update chain activity',\n    \n    // Generic error codes\n    NETWORK_ERROR: 'Network connection error',\n    API_ERROR: 'API request failed',\n    VALIDATION_ERROR: 'Invalid input data',\n    UNKNOWN_ERROR: 'An unknown error occurred'\n  };\n\n  private static readonly ERROR_PRIORITIES = {\n    PIONEER_NOT_FOUND: 2,\n    INVALID_PIONEER_CATEGORY: 2,\n    INSUFFICIENT_TRANSACTIONS: 1,\n    METRICS_UPDATE_FAILED: 3,\n    PROTOCOL_DISCOVERY_FAILED: 3,\n    STRATEGY_DEPLOYMENT_FAILED: 3,\n    CHAIN_ACTIVITY_FAILED: 2,\n    NETWORK_ERROR: 3,\n    API_ERROR: 3,\n    VALIDATION_ERROR: 2,\n    UNKNOWN_ERROR: 1\n  };\n\n  public static handleError(error: Error | ErrorDetails) {\n    let errorDetails: ErrorDetails;\n\n    if (error instanceof Error) {\n      errorDetails = this.parseError(error);\n    } else {\n      errorDetails = error;\n    }\n\n    // Log error for debugging\n    console.error('Error:', errorDetails);\n\n    // Get error message and priority\n    const message = this.ERROR_MESSAGES[errorDetails.code] || errorDetails.message;\n    const priority = this.ERROR_PRIORITIES[errorDetails.code] || 1;\n\n    // Add error notification\n    notificationQueue.add({\n      id: Date.now().toString(),\n      title: 'Error',\n      message,\n      type: 'error',\n      timestamp: Date.now(),\n      priority,\n      read: false\n    });\n\n    return errorDetails;\n  }\n\n  private static parseError(error: Error): ErrorDetails {\n    // Parse known error patterns\n    if (error.message.includes('wallet not found')) {\n      return {\n        code: 'PIONEER_NOT_FOUND',\n        message: error.message\n      };\n    }\n\n    if (error.message.includes('invalid category')) {\n      return {\n        code: 'INVALID_PIONEER_CATEGORY',\n        message: error.message\n      };\n    }\n\n    if (error.message.includes('insufficient transactions')) {\n      return {\n        code: 'INSUFFICIENT_TRANSACTIONS',\n        message: error.message\n      };\n    }\n\n    // Network errors\n    if (error.message.includes('network') || error.message.includes('Network Error')) {\n      return {\n        code: 'NETWORK_ERROR',\n        message: error.message\n      };\n    }\n\n    // API errors\n    if (error.message.includes('API') || error.message.includes('status code')) {\n      return {\n        code: 'API_ERROR',\n        message: error.message\n      };\n    }\n\n    // Validation errors\n    if (error.message.includes('validation') || error.message.includes('invalid')) {\n      return {\n        code: 'VALIDATION_ERROR',\n        message: error.message\n      };\n    }\n\n    // Default unknown error\n    return {\n      code: 'UNKNOWN_ERROR',\n      message: error.message\n    };\n  }\n\n  public static handlePioneerError(error: Error, context?: Record<string, any>): ErrorDetails {\n    let errorDetails: ErrorDetails;\n\n    // Pioneer-specific error parsing\n    if (error.message.includes('metrics')) {\n      errorDetails = {\n        code: 'METRICS_UPDATE_FAILED',\n        message: error.message,\n        context\n      };\n    } else if (error.message.includes('protocol discovery')) {\n      errorDetails = {\n        code: 'PROTOCOL_DISCOVERY_FAILED',\n        message: error.message,\n        context\n      };\n    } else if (error.message.includes('strategy deployment')) {\n      errorDetails = {\n        code: 'STRATEGY_DEPLOYMENT_FAILED',\n        message: error.message,\n        context\n      };\n    } else if (error.message.includes('chain activity')) {\n      errorDetails = {\n        code: 'CHAIN_ACTIVITY_FAILED',\n        message: error.message,\n        context\n      };\n    } else {\n      errorDetails = this.parseError(error);\n    }\n\n    return this.handleError(errorDetails);\n  }\n\n  public static isRecoverable(errorCode: string): boolean {\n    const unrecoverableErrors = [\n      'PIONEER_NOT_FOUND',\n      'INVALID_PIONEER_CATEGORY',\n      'INSUFFICIENT_TRANSACTIONS'\n    ];\n    return !unrecoverableErrors.includes(errorCode);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}