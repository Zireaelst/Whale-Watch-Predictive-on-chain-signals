{"ast":null,"code":"import settingsService from'./SettingsService';import{audioManager}from'../utils/audioUtils';import{notificationQueue}from'../utils/NotificationQueue';const MAX_STORED_NOTIFICATIONS=100;class NotificationService{constructor(){this.hasPermission=false;}async initialize(){if(!('Notification'in window)){console.log('This browser does not support notifications');return;}if(Notification.permission==='granted'){this.hasPermission=true;}else if(Notification.permission!=='denied'){const permission=await Notification.requestPermission();this.hasPermission=permission==='granted';}await audioManager.initialize();}storeNotification(notification){const stored=this.getStoredNotifications();stored.unshift(notification);if(stored.length>MAX_STORED_NOTIFICATIONS){stored.length=MAX_STORED_NOTIFICATIONS;}localStorage.setItem('notifications',JSON.stringify(stored));}getStoredNotifications(){const stored=localStorage.getItem('notifications');return stored?JSON.parse(stored):[];}notifyNewSignal(signal){const settings=settingsService.getSettings();if(!settingsService.shouldNotify(signal.priority))return;const notification={id:signal.id,title:`New ${signal.type} Signal Detected`,message:`Protocol: ${signal.protocol}\\nPattern: ${signal.pattern.name}\\nConfidence: ${(signal.pattern.confidence*100).toFixed(1)}%`,timestamp:new Date().toISOString(),priority:signal.priority,signal};this.storeNotification(notification);notificationQueue.add({id:signal.id,title:notification.title,message:notification.message,type:signal.type,timestamp:Date.now(),priority:signal.priority,read:false});if(this.hasPermission&&settings.notifications.desktopNotifications){const browserNotification=new Notification(notification.title,{body:notification.message,icon:'/logo192.png',tag:notification.id,requireInteraction:signal.priority>=8});browserNotification.onclick=()=>{window.focus();browserNotification.close();};if(signal.priority<8){setTimeout(()=>browserNotification.close(),5000);}}// Play sound if enabled\nif(settings.notifications.soundEnabled){const soundType=signal.priority>=8?'alert':'notification';audioManager.playNotification(soundType);}}notifyConnectionStatus(isConnected){const settings=settingsService.getSettings();if(!isConnected){const notification={id:`connection-${Date.now()}`,title:'Connection Lost',message:'Lost connection to DeFi Pioneer Watch. Attempting to reconnect...',timestamp:new Date().toISOString(),priority:10};this.storeNotification(notification);notificationQueue.add({id:notification.id,title:notification.title,message:notification.message,type:'error',timestamp:Date.now(),priority:10,read:false});if(settings.notifications.soundEnabled){audioManager.playNotification('disconnect');}}else{const notification={id:`connection-${Date.now()}`,title:'Connection Restored',message:'Successfully reconnected to DeFi Pioneer Watch.',timestamp:new Date().toISOString(),priority:9};this.storeNotification(notification);notificationQueue.add({id:notification.id,title:notification.title,message:notification.message,type:'success',timestamp:Date.now(),priority:9,read:false});if(settings.notifications.soundEnabled){audioManager.playNotification('connect');}}}clearAllNotifications(){localStorage.setItem('notifications','[]');localStorage.removeItem('lastNotificationRead');notificationQueue.clear();}cleanup(){audioManager.dispose();}}const notificationService=new NotificationService();export default notificationService;","map":{"version":3,"names":["settingsService","audioManager","notificationQueue","MAX_STORED_NOTIFICATIONS","NotificationService","constructor","hasPermission","initialize","window","console","log","Notification","permission","requestPermission","storeNotification","notification","stored","getStoredNotifications","unshift","length","localStorage","setItem","JSON","stringify","getItem","parse","notifyNewSignal","signal","settings","getSettings","shouldNotify","priority","id","title","type","message","protocol","pattern","name","confidence","toFixed","timestamp","Date","toISOString","add","now","read","notifications","desktopNotifications","browserNotification","body","icon","tag","requireInteraction","onclick","focus","close","setTimeout","soundEnabled","soundType","playNotification","notifyConnectionStatus","isConnected","clearAllNotifications","removeItem","clear","cleanup","dispose","notificationService"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/services/NotificationService.ts"],"sourcesContent":["import { Signal } from '../types';\nimport settingsService from './SettingsService';\nimport { audioManager } from '../utils/audioUtils';\nimport { notificationQueue } from '../utils/NotificationQueue';\n\ninterface StoredNotification {\n  id: string;\n  title: string;\n  message: string;\n  timestamp: string;\n  priority: number;\n  signal?: Signal;\n}\n\nconst MAX_STORED_NOTIFICATIONS = 100;\n\nclass NotificationService {\n  private hasPermission: boolean = false;\n\n  async initialize() {\n    if (!('Notification' in window)) {\n      console.log('This browser does not support notifications');\n      return;\n    }\n\n    if (Notification.permission === 'granted') {\n      this.hasPermission = true;\n    } else if (Notification.permission !== 'denied') {\n      const permission = await Notification.requestPermission();\n      this.hasPermission = permission === 'granted';\n    }\n\n    await audioManager.initialize();\n  }\n\n  private storeNotification(notification: StoredNotification) {\n    const stored = this.getStoredNotifications();\n    stored.unshift(notification);\n    \n    if (stored.length > MAX_STORED_NOTIFICATIONS) {\n      stored.length = MAX_STORED_NOTIFICATIONS;\n    }\n\n    localStorage.setItem('notifications', JSON.stringify(stored));\n  }\n\n  private getStoredNotifications(): StoredNotification[] {\n    const stored = localStorage.getItem('notifications');\n    return stored ? JSON.parse(stored) : [];\n  }\n\n  notifyNewSignal(signal: Signal) {\n    const settings = settingsService.getSettings();\n    if (!settingsService.shouldNotify(signal.priority)) return;\n\n    const notification: StoredNotification = {\n      id: signal.id,\n      title: `New ${signal.type} Signal Detected`,\n      message: `Protocol: ${signal.protocol}\\nPattern: ${signal.pattern.name}\\nConfidence: ${(signal.pattern.confidence * 100).toFixed(1)}%`,\n      timestamp: new Date().toISOString(),\n      priority: signal.priority,\n      signal,\n    };\n\n    this.storeNotification(notification);\n\n    notificationQueue.add({\n      id: signal.id,\n      title: notification.title,\n      message: notification.message,\n      type: signal.type as any,\n      timestamp: Date.now(),\n      priority: signal.priority,\n      read: false\n    });\n\n    if (this.hasPermission && settings.notifications.desktopNotifications) {\n      const browserNotification = new Notification(notification.title, {\n        body: notification.message,\n        icon: '/logo192.png',\n        tag: notification.id,\n        requireInteraction: signal.priority >= 8,\n      });\n\n      browserNotification.onclick = () => {\n        window.focus();\n        browserNotification.close();\n      };\n\n      if (signal.priority < 8) {\n        setTimeout(() => browserNotification.close(), 5000);\n      }\n    }\n\n    // Play sound if enabled\n    if (settings.notifications.soundEnabled) {\n      const soundType = signal.priority >= 8 ? 'alert' : 'notification';\n      audioManager.playNotification(soundType);\n    }\n  }\n\n  notifyConnectionStatus(isConnected: boolean) {\n    const settings = settingsService.getSettings();\n    \n    if (!isConnected) {\n      const notification: StoredNotification = {\n        id: `connection-${Date.now()}`,\n        title: 'Connection Lost',\n        message: 'Lost connection to DeFi Pioneer Watch. Attempting to reconnect...',\n        timestamp: new Date().toISOString(),\n        priority: 10,\n      };\n\n      this.storeNotification(notification);\n\n      notificationQueue.add({\n        id: notification.id,\n        title: notification.title,\n        message: notification.message,\n        type: 'error',\n        timestamp: Date.now(),\n        priority: 10,\n        read: false\n      });\n\n      if (settings.notifications.soundEnabled) {\n        audioManager.playNotification('disconnect');\n      }\n    } else {\n      const notification: StoredNotification = {\n        id: `connection-${Date.now()}`,\n        title: 'Connection Restored',\n        message: 'Successfully reconnected to DeFi Pioneer Watch.',\n        timestamp: new Date().toISOString(),\n        priority: 9,\n      };\n\n      this.storeNotification(notification);\n\n      notificationQueue.add({\n        id: notification.id,\n        title: notification.title,\n        message: notification.message,\n        type: 'success',\n        timestamp: Date.now(),\n        priority: 9,\n        read: false\n      });\n\n      if (settings.notifications.soundEnabled) {\n        audioManager.playNotification('connect');\n      }\n    }\n  }\n\n  clearAllNotifications() {\n    localStorage.setItem('notifications', '[]');\n    localStorage.removeItem('lastNotificationRead');\n    notificationQueue.clear();\n  }\n\n  cleanup() {\n    audioManager.dispose();\n  }\n}\n\nconst notificationService = new NotificationService();\nexport default notificationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}