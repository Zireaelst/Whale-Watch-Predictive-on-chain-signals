{"ast":null,"code":"import settingsService from './SettingsService';\nimport { audioManager } from '../utils/audioUtils';\nimport { notificationQueue } from '../utils/NotificationQueue';\nconst MAX_STORED_NOTIFICATIONS = 100;\nclass NotificationService {\n  constructor() {\n    this.hasPermission = false;\n  }\n  async initialize() {\n    if (!('Notification' in window)) {\n      console.log('This browser does not support notifications');\n      return;\n    }\n    if (Notification.permission === 'granted') {\n      this.hasPermission = true;\n    } else if (Notification.permission !== 'denied') {\n      const permission = await Notification.requestPermission();\n      this.hasPermission = permission === 'granted';\n    }\n    await audioManager.initialize();\n  }\n  storeNotification(notification) {\n    const stored = this.getStoredNotifications();\n    stored.unshift(notification);\n\n    // Keep only the latest MAX_STORED_NOTIFICATIONS\n    if (stored.length > MAX_STORED_NOTIFICATIONS) {\n      stored.length = MAX_STORED_NOTIFICATIONS;\n    }\n    localStorage.setItem('notifications', JSON.stringify(stored));\n  }\n  getStoredNotifications() {\n    const stored = localStorage.getItem('notifications');\n    return stored ? JSON.parse(stored) : [];\n  }\n  notifyNewSignal(signal) {\n    const settings = settingsService.getSettings();\n    if (!settingsService.shouldNotify(signal.priority)) return;\n    const notification = {\n      id: signal.id,\n      title: `New ${signal.type} Signal Detected`,\n      message: `Protocol: ${signal.protocol}\\nPattern: ${signal.pattern.name}\\nConfidence: ${(signal.pattern.confidence * 100).toFixed(1)}%`,\n      timestamp: new Date().toISOString(),\n      priority: signal.priority,\n      signal\n    };\n\n    // Store the notification\n    this.storeNotification(notification);\n    notificationQueue.add({\n      id: signal.id,\n      priority: signal.priority,\n      execute: async () => {\n        // Handle desktop notifications\n        if (this.hasPermission && settings.notifications.desktopNotifications) {\n          const browserNotification = new Notification(notification.title, {\n            body: notification.message,\n            icon: '/logo192.png',\n            tag: notification.id,\n            requireInteraction: signal.priority >= 8\n          });\n          browserNotification.onclick = () => {\n            window.focus();\n            browserNotification.close();\n          };\n          if (signal.priority < 8) {\n            setTimeout(() => browserNotification.close(), 5000);\n          }\n        }\n\n        // Handle sound notifications\n        if (settings.notifications.soundEnabled) {\n          const soundType = signal.priority >= 8 ? 'alert' : 'notification';\n          await audioManager.playSound(soundType);\n        }\n      }\n    });\n  }\n  notifyConnectionStatus(isConnected) {\n    const settings = settingsService.getSettings();\n    if (!isConnected) {\n      const notification = {\n        id: `connection-${Date.now()}`,\n        title: 'Connection Lost',\n        message: 'Lost connection to DeFi Pioneer Watch. Attempting to reconnect...',\n        timestamp: new Date().toISOString(),\n        priority: 10\n      };\n      this.storeNotification(notification);\n      notificationQueue.add({\n        id: notification.id,\n        priority: 10,\n        execute: async () => {\n          if (this.hasPermission && settings.notifications.desktopNotifications) {\n            new Notification(notification.title, {\n              body: notification.message,\n              icon: '/logo192.png',\n              tag: 'connection-status'\n            });\n          }\n          if (settings.notifications.soundEnabled) {\n            await audioManager.playSound('disconnect');\n          }\n        }\n      });\n    } else {\n      const notification = {\n        id: `connection-${Date.now()}`,\n        title: 'Connection Restored',\n        message: 'Successfully reconnected to DeFi Pioneer Watch.',\n        timestamp: new Date().toISOString(),\n        priority: 9\n      };\n      this.storeNotification(notification);\n      if (settings.notifications.soundEnabled) {\n        notificationQueue.add({\n          id: notification.id,\n          priority: 9,\n          execute: async () => {\n            await audioManager.playSound('connect');\n          }\n        });\n      }\n    }\n  }\n  clearAllNotifications() {\n    localStorage.setItem('notifications', '[]');\n    localStorage.removeItem('lastNotificationRead');\n  }\n  cleanup() {\n    audioManager.stopAll();\n    notificationQueue.clear();\n  }\n}\nexport default new NotificationService();","map":{"version":3,"names":["settingsService","audioManager","notificationQueue","MAX_STORED_NOTIFICATIONS","NotificationService","constructor","hasPermission","initialize","window","console","log","Notification","permission","requestPermission","storeNotification","notification","stored","getStoredNotifications","unshift","length","localStorage","setItem","JSON","stringify","getItem","parse","notifyNewSignal","signal","settings","getSettings","shouldNotify","priority","id","title","type","message","protocol","pattern","name","confidence","toFixed","timestamp","Date","toISOString","add","execute","notifications","desktopNotifications","browserNotification","body","icon","tag","requireInteraction","onclick","focus","close","setTimeout","soundEnabled","soundType","playSound","notifyConnectionStatus","isConnected","now","clearAllNotifications","removeItem","cleanup","stopAll","clear"],"sources":["/Users/toyguntez/Visual Studio /Whale-Watch-Predictive-on-chain-signals/frontend/src/services/NotificationService.ts"],"sourcesContent":["import { Signal } from '../types';\nimport settingsService from './SettingsService';\nimport { audioManager } from '../utils/audioUtils';\nimport { notificationQueue } from '../utils/NotificationQueue';\n\ninterface StoredNotification {\n  id: string;\n  title: string;\n  message: string;\n  timestamp: string;\n  priority: number;\n  signal?: Signal;\n}\n\nconst MAX_STORED_NOTIFICATIONS = 100;\n\nclass NotificationService {\n  private hasPermission: boolean = false;\n\n  async initialize() {\n    if (!('Notification' in window)) {\n      console.log('This browser does not support notifications');\n      return;\n    }\n\n    if (Notification.permission === 'granted') {\n      this.hasPermission = true;\n    } else if (Notification.permission !== 'denied') {\n      const permission = await Notification.requestPermission();\n      this.hasPermission = permission === 'granted';\n    }\n\n    await audioManager.initialize();\n  }\n\n  private storeNotification(notification: StoredNotification) {\n    const stored = this.getStoredNotifications();\n    stored.unshift(notification);\n    \n    // Keep only the latest MAX_STORED_NOTIFICATIONS\n    if (stored.length > MAX_STORED_NOTIFICATIONS) {\n      stored.length = MAX_STORED_NOTIFICATIONS;\n    }\n\n    localStorage.setItem('notifications', JSON.stringify(stored));\n  }\n\n  private getStoredNotifications(): StoredNotification[] {\n    const stored = localStorage.getItem('notifications');\n    return stored ? JSON.parse(stored) : [];\n  }\n\n  notifyNewSignal(signal: Signal) {\n    const settings = settingsService.getSettings();\n    if (!settingsService.shouldNotify(signal.priority)) return;\n\n    const notification: StoredNotification = {\n      id: signal.id,\n      title: `New ${signal.type} Signal Detected`,\n      message: `Protocol: ${signal.protocol}\\nPattern: ${signal.pattern.name}\\nConfidence: ${(signal.pattern.confidence * 100).toFixed(1)}%`,\n      timestamp: new Date().toISOString(),\n      priority: signal.priority,\n      signal,\n    };\n\n    // Store the notification\n    this.storeNotification(notification);\n\n    notificationQueue.add({\n      id: signal.id,\n      priority: signal.priority,\n      execute: async () => {\n        // Handle desktop notifications\n        if (this.hasPermission && settings.notifications.desktopNotifications) {\n          const browserNotification = new Notification(notification.title, {\n            body: notification.message,\n            icon: '/logo192.png',\n            tag: notification.id,\n            requireInteraction: signal.priority >= 8,\n          });\n\n          browserNotification.onclick = () => {\n            window.focus();\n            browserNotification.close();\n          };\n\n          if (signal.priority < 8) {\n            setTimeout(() => browserNotification.close(), 5000);\n          }\n        }\n\n        // Handle sound notifications\n        if (settings.notifications.soundEnabled) {\n          const soundType = signal.priority >= 8 ? 'alert' : 'notification';\n          await audioManager.playSound(soundType);\n        }\n      }\n    });\n  }\n\n  notifyConnectionStatus(isConnected: boolean) {\n    const settings = settingsService.getSettings();\n    \n    if (!isConnected) {\n      const notification: StoredNotification = {\n        id: `connection-${Date.now()}`,\n        title: 'Connection Lost',\n        message: 'Lost connection to DeFi Pioneer Watch. Attempting to reconnect...',\n        timestamp: new Date().toISOString(),\n        priority: 10,\n      };\n\n      this.storeNotification(notification);\n\n      notificationQueue.add({\n        id: notification.id,\n        priority: 10,\n        execute: async () => {\n          if (this.hasPermission && settings.notifications.desktopNotifications) {\n            new Notification(notification.title, {\n              body: notification.message,\n              icon: '/logo192.png',\n              tag: 'connection-status',\n            });\n          }\n\n          if (settings.notifications.soundEnabled) {\n            await audioManager.playSound('disconnect');\n          }\n        }\n      });\n    } else {\n      const notification: StoredNotification = {\n        id: `connection-${Date.now()}`,\n        title: 'Connection Restored',\n        message: 'Successfully reconnected to DeFi Pioneer Watch.',\n        timestamp: new Date().toISOString(),\n        priority: 9,\n      };\n\n      this.storeNotification(notification);\n\n      if (settings.notifications.soundEnabled) {\n        notificationQueue.add({\n          id: notification.id,\n          priority: 9,\n          execute: async () => {\n            await audioManager.playSound('connect');\n          }\n        });\n      }\n    }\n  }\n\n  clearAllNotifications() {\n    localStorage.setItem('notifications', '[]');\n    localStorage.removeItem('lastNotificationRead');\n  }\n\n  cleanup() {\n    audioManager.stopAll();\n    notificationQueue.clear();\n  }\n}\n\nexport default new NotificationService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}